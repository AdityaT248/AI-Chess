{"ast":null,"code":"var _jsxFileName = \"/Users/aditya.thakkar/Documents/AI Chess/src/components/ChessBoard.js\";\nimport React, { useState, useEffect } from 'react';\nimport './ChessBoard.css';\nconst ChessBoard = ({\n  board,\n  selectedPiece,\n  onSquareClick,\n  highlightedSquares = [],\n  checkIndicator = null,\n  lastMove = null\n}) => {\n  const [capturedPieces, setCapturedPieces] = useState({\n    white: [],\n    black: []\n  });\n\n  // Track captured pieces\n  useEffect(() => {\n    const whitePieces = [];\n    const blackPieces = [];\n\n    // Count all pieces that should be on the board\n    const expectedPieces = {\n      'pawn': 8,\n      'rook': 2,\n      'knight': 2,\n      'bishop': 2,\n      'queen': 1,\n      'king': 1\n    };\n\n    // Count pieces actually on the board\n    const actualPieces = {\n      'white': {\n        'pawn': 0,\n        'rook': 0,\n        'knight': 0,\n        'bishop': 0,\n        'queen': 0,\n        'king': 0\n      },\n      'black': {\n        'pawn': 0,\n        'rook': 0,\n        'knight': 0,\n        'bishop': 0,\n        'queen': 0,\n        'king': 0\n      }\n    };\n\n    // Count pieces on the board\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece) {\n          actualPieces[piece.color][piece.type]++;\n        }\n      }\n    }\n\n    // Calculate captured pieces\n    for (const pieceType in expectedPieces) {\n      const whiteCaptured = expectedPieces[pieceType] - actualPieces['white'][pieceType];\n      const blackCaptured = expectedPieces[pieceType] - actualPieces['black'][pieceType];\n      for (let i = 0; i < whiteCaptured; i++) {\n        whitePieces.push(pieceType);\n      }\n      for (let i = 0; i < blackCaptured; i++) {\n        blackPieces.push(pieceType);\n      }\n    }\n    setCapturedPieces({\n      white: whitePieces,\n      black: blackPieces\n    });\n  }, [board]);\n  const renderSquare = (row, col) => {\n    const piece = board[row][col];\n    const isSelected = selectedPiece && selectedPiece.row === row && selectedPiece.col === col;\n    const isLightSquare = (row + col) % 2 === 0;\n\n    // Check if this square is a valid move destination\n    const isValidMove = highlightedSquares.some(square => square.row === row && square.col === col);\n\n    // Check if this square contains a king in check\n    const isCheck = checkIndicator && piece && piece.type === 'king' && piece.color === checkIndicator;\n\n    // Check if this square was part of the last move\n    const isLastMoveFrom = lastMove && lastMove.from && lastMove.from.row === row && lastMove.from.col === col;\n    const isLastMoveTo = lastMove && lastMove.to && lastMove.to.row === row && lastMove.to.col === col;\n\n    // Determine piece symbol based on type and color\n    let pieceSymbol = '';\n    if (piece) {\n      switch (piece.type) {\n        case 'pawn':\n          pieceSymbol = piece.color === 'white' ? '♙' : '♟';\n          break;\n        case 'rook':\n          pieceSymbol = piece.color === 'white' ? '♖' : '♜';\n          break;\n        case 'knight':\n          pieceSymbol = piece.color === 'white' ? '♘' : '♞';\n          break;\n        case 'bishop':\n          pieceSymbol = piece.color === 'white' ? '♗' : '♝';\n          break;\n        case 'queen':\n          pieceSymbol = piece.color === 'white' ? '♕' : '♛';\n          break;\n        case 'king':\n          pieceSymbol = piece.color === 'white' ? '♔' : '♚';\n          break;\n        default:\n          pieceSymbol = '';\n      }\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: `${row}-${col}`,\n      className: `\n          square \n          ${isLightSquare ? 'light' : 'dark'} \n          ${isSelected ? 'selected' : ''} \n          ${isValidMove ? 'valid-move' : ''}\n          ${isCheck ? 'check' : ''}\n          ${isLastMoveFrom ? 'last-move-from' : ''}\n          ${isLastMoveTo ? 'last-move-to' : ''}\n        `,\n      onClick: () => onSquareClick(row, col),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, isValidMove && !piece && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"move-indicator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 35\n      }\n    }), piece && /*#__PURE__*/React.createElement(\"div\", {\n      className: `piece ${piece.color}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 19\n      }\n    }, pieceSymbol), row === 7 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"file-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 23\n      }\n    }, String.fromCharCode(97 + col)), col === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rank-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 23\n      }\n    }, 8 - row));\n  };\n  const renderBoard = () => {\n    const rows = [];\n    for (let row = 0; row < 8; row++) {\n      const cols = [];\n      for (let col = 0; col < 8; col++) {\n        cols.push(renderSquare(row, col));\n      }\n      rows.push(/*#__PURE__*/React.createElement(\"div\", {\n        key: row,\n        className: \"board-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }\n      }, cols));\n    }\n    return rows;\n  };\n  const renderCapturedPieces = color => {\n    return capturedPieces[color].map((pieceType, index) => {\n      let pieceSymbol = '';\n      switch (pieceType) {\n        case 'pawn':\n          pieceSymbol = color === 'white' ? '♙' : '♟';\n          break;\n        case 'rook':\n          pieceSymbol = color === 'white' ? '♖' : '♜';\n          break;\n        case 'knight':\n          pieceSymbol = color === 'white' ? '♘' : '♞';\n          break;\n        case 'bishop':\n          pieceSymbol = color === 'white' ? '♗' : '♝';\n          break;\n        case 'queen':\n          pieceSymbol = color === 'white' ? '♕' : '♛';\n          break;\n        case 'king':\n          pieceSymbol = color === 'white' ? '♔' : '♚';\n          break;\n        default:\n          pieceSymbol = '';\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: `${color}-${pieceType}-${index}`,\n        className: `captured-piece ${color}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      }, pieceSymbol);\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chess-board-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"captured-pieces black-captured\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, renderCapturedPieces('black')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chess-board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, renderBoard()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"captured-pieces white-captured\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, renderCapturedPieces('white')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-coordinates\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"files\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].map(file => /*#__PURE__*/React.createElement(\"div\", {\n    key: file,\n    className: \"coordinate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, file))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ranks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, [8, 7, 6, 5, 4, 3, 2, 1].map(rank => /*#__PURE__*/React.createElement(\"div\", {\n    key: rank,\n    className: \"coordinate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, rank)))));\n};\nexport default ChessBoard;","map":{"version":3,"names":["React","useState","useEffect","ChessBoard","board","selectedPiece","onSquareClick","highlightedSquares","checkIndicator","lastMove","capturedPieces","setCapturedPieces","white","black","whitePieces","blackPieces","expectedPieces","actualPieces","row","col","piece","color","type","pieceType","whiteCaptured","blackCaptured","i","push","renderSquare","isSelected","isLightSquare","isValidMove","some","square","isCheck","isLastMoveFrom","from","isLastMoveTo","to","pieceSymbol","createElement","key","className","onClick","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","String","fromCharCode","renderBoard","rows","cols","renderCapturedPieces","map","index","file","rank"],"sources":["/Users/aditya.thakkar/Documents/AI Chess/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ \n  board, \n  selectedPiece, \n  onSquareClick, \n  highlightedSquares = [], \n  checkIndicator = null,\n  lastMove = null\n}) => {\n  const [capturedPieces, setCapturedPieces] = useState({\n    white: [],\n    black: []\n  });\n\n  // Track captured pieces\n  useEffect(() => {\n    const whitePieces = [];\n    const blackPieces = [];\n    \n    // Count all pieces that should be on the board\n    const expectedPieces = {\n      'pawn': 8,\n      'rook': 2,\n      'knight': 2,\n      'bishop': 2,\n      'queen': 1,\n      'king': 1\n    };\n    \n    // Count pieces actually on the board\n    const actualPieces = {\n      'white': { 'pawn': 0, 'rook': 0, 'knight': 0, 'bishop': 0, 'queen': 0, 'king': 0 },\n      'black': { 'pawn': 0, 'rook': 0, 'knight': 0, 'bishop': 0, 'queen': 0, 'king': 0 }\n    };\n    \n    // Count pieces on the board\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece) {\n          actualPieces[piece.color][piece.type]++;\n        }\n      }\n    }\n    \n    // Calculate captured pieces\n    for (const pieceType in expectedPieces) {\n      const whiteCaptured = expectedPieces[pieceType] - actualPieces['white'][pieceType];\n      const blackCaptured = expectedPieces[pieceType] - actualPieces['black'][pieceType];\n      \n      for (let i = 0; i < whiteCaptured; i++) {\n        whitePieces.push(pieceType);\n      }\n      \n      for (let i = 0; i < blackCaptured; i++) {\n        blackPieces.push(pieceType);\n      }\n    }\n    \n    setCapturedPieces({\n      white: whitePieces,\n      black: blackPieces\n    });\n  }, [board]);\n\n  const renderSquare = (row, col) => {\n    const piece = board[row][col];\n    const isSelected = selectedPiece && selectedPiece.row === row && selectedPiece.col === col;\n    const isLightSquare = (row + col) % 2 === 0;\n    \n    // Check if this square is a valid move destination\n    const isValidMove = highlightedSquares.some(square => square.row === row && square.col === col);\n    \n    // Check if this square contains a king in check\n    const isCheck = checkIndicator && piece && piece.type === 'king' && piece.color === checkIndicator;\n    \n    // Check if this square was part of the last move\n    const isLastMoveFrom = lastMove && lastMove.from && lastMove.from.row === row && lastMove.from.col === col;\n    const isLastMoveTo = lastMove && lastMove.to && lastMove.to.row === row && lastMove.to.col === col;\n    \n    // Determine piece symbol based on type and color\n    let pieceSymbol = '';\n    if (piece) {\n      switch (piece.type) {\n        case 'pawn':\n          pieceSymbol = piece.color === 'white' ? '♙' : '♟';\n          break;\n        case 'rook':\n          pieceSymbol = piece.color === 'white' ? '♖' : '♜';\n          break;\n        case 'knight':\n          pieceSymbol = piece.color === 'white' ? '♘' : '♞';\n          break;\n        case 'bishop':\n          pieceSymbol = piece.color === 'white' ? '♗' : '♝';\n          break;\n        case 'queen':\n          pieceSymbol = piece.color === 'white' ? '♕' : '♛';\n          break;\n        case 'king':\n          pieceSymbol = piece.color === 'white' ? '♔' : '♚';\n          break;\n        default:\n          pieceSymbol = '';\n      }\n    }\n    \n    return (\n      <div \n        key={`${row}-${col}`}\n        className={`\n          square \n          ${isLightSquare ? 'light' : 'dark'} \n          ${isSelected ? 'selected' : ''} \n          ${isValidMove ? 'valid-move' : ''}\n          ${isCheck ? 'check' : ''}\n          ${isLastMoveFrom ? 'last-move-from' : ''}\n          ${isLastMoveTo ? 'last-move-to' : ''}\n        `}\n        onClick={() => onSquareClick(row, col)}\n      >\n        {isValidMove && !piece && <div className=\"move-indicator\"></div>}\n        {piece && <div className={`piece ${piece.color}`}>{pieceSymbol}</div>}\n        {row === 7 && <div className=\"file-label\">{String.fromCharCode(97 + col)}</div>}\n        {col === 0 && <div className=\"rank-label\">{8 - row}</div>}\n      </div>\n    );\n  };\n\n  const renderBoard = () => {\n    const rows = [];\n    for (let row = 0; row < 8; row++) {\n      const cols = [];\n      for (let col = 0; col < 8; col++) {\n        cols.push(renderSquare(row, col));\n      }\n      rows.push(\n        <div key={row} className=\"board-row\">\n          {cols}\n        </div>\n      );\n    }\n    return rows;\n  };\n\n  const renderCapturedPieces = (color) => {\n    return capturedPieces[color].map((pieceType, index) => {\n      let pieceSymbol = '';\n      switch (pieceType) {\n        case 'pawn':\n          pieceSymbol = color === 'white' ? '♙' : '♟';\n          break;\n        case 'rook':\n          pieceSymbol = color === 'white' ? '♖' : '♜';\n          break;\n        case 'knight':\n          pieceSymbol = color === 'white' ? '♘' : '♞';\n          break;\n        case 'bishop':\n          pieceSymbol = color === 'white' ? '♗' : '♝';\n          break;\n        case 'queen':\n          pieceSymbol = color === 'white' ? '♕' : '♛';\n          break;\n        case 'king':\n          pieceSymbol = color === 'white' ? '♔' : '♚';\n          break;\n        default:\n          pieceSymbol = '';\n      }\n      \n      return (\n        <div key={`${color}-${pieceType}-${index}`} className={`captured-piece ${color}`}>\n          {pieceSymbol}\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className=\"chess-board-container\">\n      <div className=\"captured-pieces black-captured\">\n        {renderCapturedPieces('black')}\n      </div>\n      <div className=\"chess-board\">\n        {renderBoard()}\n      </div>\n      <div className=\"captured-pieces white-captured\">\n        {renderCapturedPieces('white')}\n      </div>\n      <div className=\"board-coordinates\">\n        <div className=\"files\">\n          {['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].map(file => (\n            <div key={file} className=\"coordinate\">{file}</div>\n          ))}\n        </div>\n        <div className=\"ranks\">\n          {[8, 7, 6, 5, 4, 3, 2, 1].map(rank => (\n            <div key={rank} className=\"coordinate\">{rank}</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard; "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;AAEzB,MAAMC,UAAU,GAAGA,CAAC;EAClBC,KAAK;EACLC,aAAa;EACbC,aAAa;EACbC,kBAAkB,GAAG,EAAE;EACvBC,cAAc,GAAG,IAAI;EACrBC,QAAQ,GAAG;AACb,CAAC,KAAK;EACJ,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC;IACnDW,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC,CAAC;;EAEF;EACAX,SAAS,CAAC,MAAM;IACd,MAAMY,WAAW,GAAG,EAAE;IACtB,MAAMC,WAAW,GAAG,EAAE;;IAEtB;IACA,MAAMC,cAAc,GAAG;MACrB,MAAM,EAAE,CAAC;MACT,MAAM,EAAE,CAAC;MACT,QAAQ,EAAE,CAAC;MACX,QAAQ,EAAE,CAAC;MACX,OAAO,EAAE,CAAC;MACV,MAAM,EAAE;IACV,CAAC;;IAED;IACA,MAAMC,YAAY,GAAG;MACnB,OAAO,EAAE;QAAE,MAAM,EAAE,CAAC;QAAE,MAAM,EAAE,CAAC;QAAE,QAAQ,EAAE,CAAC;QAAE,QAAQ,EAAE,CAAC;QAAE,OAAO,EAAE,CAAC;QAAE,MAAM,EAAE;MAAE,CAAC;MAClF,OAAO,EAAE;QAAE,MAAM,EAAE,CAAC;QAAE,MAAM,EAAE,CAAC;QAAE,QAAQ,EAAE,CAAC;QAAE,QAAQ,EAAE,CAAC;QAAE,OAAO,EAAE,CAAC;QAAE,MAAM,EAAE;MAAE;IACnF,CAAC;;IAED;IACA,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChC,MAAMC,KAAK,GAAGhB,KAAK,CAACc,GAAG,CAAC,CAACC,GAAG,CAAC;QAC7B,IAAIC,KAAK,EAAE;UACTH,YAAY,CAACG,KAAK,CAACC,KAAK,CAAC,CAACD,KAAK,CAACE,IAAI,CAAC,EAAE;QACzC;MACF;IACF;;IAEA;IACA,KAAK,MAAMC,SAAS,IAAIP,cAAc,EAAE;MACtC,MAAMQ,aAAa,GAAGR,cAAc,CAACO,SAAS,CAAC,GAAGN,YAAY,CAAC,OAAO,CAAC,CAACM,SAAS,CAAC;MAClF,MAAME,aAAa,GAAGT,cAAc,CAACO,SAAS,CAAC,GAAGN,YAAY,CAAC,OAAO,CAAC,CAACM,SAAS,CAAC;MAElF,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,aAAa,EAAEE,CAAC,EAAE,EAAE;QACtCZ,WAAW,CAACa,IAAI,CAACJ,SAAS,CAAC;MAC7B;MAEA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,aAAa,EAAEC,CAAC,EAAE,EAAE;QACtCX,WAAW,CAACY,IAAI,CAACJ,SAAS,CAAC;MAC7B;IACF;IAEAZ,iBAAiB,CAAC;MAChBC,KAAK,EAAEE,WAAW;MAClBD,KAAK,EAAEE;IACT,CAAC,CAAC;EACJ,CAAC,EAAE,CAACX,KAAK,CAAC,CAAC;EAEX,MAAMwB,YAAY,GAAGA,CAACV,GAAG,EAAEC,GAAG,KAAK;IACjC,MAAMC,KAAK,GAAGhB,KAAK,CAACc,GAAG,CAAC,CAACC,GAAG,CAAC;IAC7B,MAAMU,UAAU,GAAGxB,aAAa,IAAIA,aAAa,CAACa,GAAG,KAAKA,GAAG,IAAIb,aAAa,CAACc,GAAG,KAAKA,GAAG;IAC1F,MAAMW,aAAa,GAAG,CAACZ,GAAG,GAAGC,GAAG,IAAI,CAAC,KAAK,CAAC;;IAE3C;IACA,MAAMY,WAAW,GAAGxB,kBAAkB,CAACyB,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACf,GAAG,KAAKA,GAAG,IAAIe,MAAM,CAACd,GAAG,KAAKA,GAAG,CAAC;;IAE/F;IACA,MAAMe,OAAO,GAAG1B,cAAc,IAAIY,KAAK,IAAIA,KAAK,CAACE,IAAI,KAAK,MAAM,IAAIF,KAAK,CAACC,KAAK,KAAKb,cAAc;;IAElG;IACA,MAAM2B,cAAc,GAAG1B,QAAQ,IAAIA,QAAQ,CAAC2B,IAAI,IAAI3B,QAAQ,CAAC2B,IAAI,CAAClB,GAAG,KAAKA,GAAG,IAAIT,QAAQ,CAAC2B,IAAI,CAACjB,GAAG,KAAKA,GAAG;IAC1G,MAAMkB,YAAY,GAAG5B,QAAQ,IAAIA,QAAQ,CAAC6B,EAAE,IAAI7B,QAAQ,CAAC6B,EAAE,CAACpB,GAAG,KAAKA,GAAG,IAAIT,QAAQ,CAAC6B,EAAE,CAACnB,GAAG,KAAKA,GAAG;;IAElG;IACA,IAAIoB,WAAW,GAAG,EAAE;IACpB,IAAInB,KAAK,EAAE;MACT,QAAQA,KAAK,CAACE,IAAI;QAChB,KAAK,MAAM;UACTiB,WAAW,GAAGnB,KAAK,CAACC,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UACjD;QACF,KAAK,MAAM;UACTkB,WAAW,GAAGnB,KAAK,CAACC,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UACjD;QACF,KAAK,QAAQ;UACXkB,WAAW,GAAGnB,KAAK,CAACC,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UACjD;QACF,KAAK,QAAQ;UACXkB,WAAW,GAAGnB,KAAK,CAACC,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UACjD;QACF,KAAK,OAAO;UACVkB,WAAW,GAAGnB,KAAK,CAACC,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UACjD;QACF,KAAK,MAAM;UACTkB,WAAW,GAAGnB,KAAK,CAACC,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UACjD;QACF;UACEkB,WAAW,GAAG,EAAE;MACpB;IACF;IAEA,oBACEvC,KAAA,CAAAwC,aAAA;MACEC,GAAG,EAAE,GAAGvB,GAAG,IAAIC,GAAG,EAAG;MACrBuB,SAAS,EAAE;AACnB;AACA,YAAYZ,aAAa,GAAG,OAAO,GAAG,MAAM;AAC5C,YAAYD,UAAU,GAAG,UAAU,GAAG,EAAE;AACxC,YAAYE,WAAW,GAAG,YAAY,GAAG,EAAE;AAC3C,YAAYG,OAAO,GAAG,OAAO,GAAG,EAAE;AAClC,YAAYC,cAAc,GAAG,gBAAgB,GAAG,EAAE;AAClD,YAAYE,YAAY,GAAG,cAAc,GAAG,EAAE;AAC9C,SAAU;MACFM,OAAO,EAAEA,CAAA,KAAMrC,aAAa,CAACY,GAAG,EAAEC,GAAG,CAAE;MAAAyB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAEtClB,WAAW,IAAI,CAACX,KAAK,iBAAIpB,KAAA,CAAAwC,aAAA;MAAKE,SAAS,EAAC,gBAAgB;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAM,CAAC,EAC/D7B,KAAK,iBAAIpB,KAAA,CAAAwC,aAAA;MAAKE,SAAS,EAAE,SAAStB,KAAK,CAACC,KAAK,EAAG;MAAAuB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAEV,WAAiB,CAAC,EACpErB,GAAG,KAAK,CAAC,iBAAIlB,KAAA,CAAAwC,aAAA;MAAKE,SAAS,EAAC,YAAY;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAEC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGhC,GAAG,CAAO,CAAC,EAC9EA,GAAG,KAAK,CAAC,iBAAInB,KAAA,CAAAwC,aAAA;MAAKE,SAAS,EAAC,YAAY;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAE,CAAC,GAAG/B,GAAS,CACrD,CAAC;EAEV,CAAC;EAED,MAAMkC,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,IAAI,GAAG,EAAE;IACf,KAAK,IAAInC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,MAAMoC,IAAI,GAAG,EAAE;MACf,KAAK,IAAInC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChCmC,IAAI,CAAC3B,IAAI,CAACC,YAAY,CAACV,GAAG,EAAEC,GAAG,CAAC,CAAC;MACnC;MACAkC,IAAI,CAAC1B,IAAI,cACP3B,KAAA,CAAAwC,aAAA;QAAKC,GAAG,EAAEvB,GAAI;QAACwB,SAAS,EAAC,WAAW;QAAAE,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GACjCK,IACE,CACP,CAAC;IACH;IACA,OAAOD,IAAI;EACb,CAAC;EAED,MAAME,oBAAoB,GAAIlC,KAAK,IAAK;IACtC,OAAOX,cAAc,CAACW,KAAK,CAAC,CAACmC,GAAG,CAAC,CAACjC,SAAS,EAAEkC,KAAK,KAAK;MACrD,IAAIlB,WAAW,GAAG,EAAE;MACpB,QAAQhB,SAAS;QACf,KAAK,MAAM;UACTgB,WAAW,GAAGlB,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UAC3C;QACF,KAAK,MAAM;UACTkB,WAAW,GAAGlB,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UAC3C;QACF,KAAK,QAAQ;UACXkB,WAAW,GAAGlB,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UAC3C;QACF,KAAK,QAAQ;UACXkB,WAAW,GAAGlB,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UAC3C;QACF,KAAK,OAAO;UACVkB,WAAW,GAAGlB,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UAC3C;QACF,KAAK,MAAM;UACTkB,WAAW,GAAGlB,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;UAC3C;QACF;UACEkB,WAAW,GAAG,EAAE;MACpB;MAEA,oBACEvC,KAAA,CAAAwC,aAAA;QAAKC,GAAG,EAAE,GAAGpB,KAAK,IAAIE,SAAS,IAAIkC,KAAK,EAAG;QAACf,SAAS,EAAE,kBAAkBrB,KAAK,EAAG;QAAAuB,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAC9EV,WACE,CAAC;IAEV,CAAC,CAAC;EACJ,CAAC;EAED,oBACEvC,KAAA,CAAAwC,aAAA;IAAKE,SAAS,EAAC,uBAAuB;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpCjD,KAAA,CAAAwC,aAAA;IAAKE,SAAS,EAAC,gCAAgC;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5CM,oBAAoB,CAAC,OAAO,CAC1B,CAAC,eACNvD,KAAA,CAAAwC,aAAA;IAAKE,SAAS,EAAC,aAAa;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACzBG,WAAW,CAAC,CACV,CAAC,eACNpD,KAAA,CAAAwC,aAAA;IAAKE,SAAS,EAAC,gCAAgC;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5CM,oBAAoB,CAAC,OAAO,CAC1B,CAAC,eACNvD,KAAA,CAAAwC,aAAA;IAAKE,SAAS,EAAC,mBAAmB;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAChCjD,KAAA,CAAAwC,aAAA;IAAKE,SAAS,EAAC,OAAO;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACnB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACO,GAAG,CAACE,IAAI,iBAChD1D,KAAA,CAAAwC,aAAA;IAAKC,GAAG,EAAEiB,IAAK;IAAChB,SAAS,EAAC,YAAY;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAES,IAAU,CACnD,CACE,CAAC,eACN1D,KAAA,CAAAwC,aAAA;IAAKE,SAAS,EAAC,OAAO;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACnB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACO,GAAG,CAACG,IAAI,iBAChC3D,KAAA,CAAAwC,aAAA;IAAKC,GAAG,EAAEkB,IAAK;IAACjB,SAAS,EAAC,YAAY;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEU,IAAU,CACnD,CACE,CACF,CACF,CAAC;AAEV,CAAC;AAED,eAAexD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}