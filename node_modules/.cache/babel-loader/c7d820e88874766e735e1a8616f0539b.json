{"ast":null,"code":"var _jsxFileName = \"/Users/aditya.thakkar/Documents/AI Chess/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport PromotionDialog from './components/PromotionDialog';\nimport { initializeBoard, isValidMove, makeMove, getAIMove, isInCheck, isCheckmate, isStalemate, isPawnPromotion } from './utils/chessLogic';\nfunction App() {\n  const [board, setBoard] = useState(initializeBoard());\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [playerTurn, setPlayerTurn] = useState('white');\n  const [gameStatus, setGameStatus] = useState('ongoing');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameState, setGameState] = useState({\n    enPassantTarget: null,\n    castlingRights: {\n      white: {\n        kingSide: true,\n        queenSide: true\n      },\n      black: {\n        kingSide: true,\n        queenSide: true\n      }\n    }\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState([]);\n  const [checkIndicator, setCheckIndicator] = useState(null);\n  const [aiDifficulty, setAiDifficulty] = useState('medium'); // 'easy', 'medium', 'hard'\n  const [showHint, setShowHint] = useState(false);\n  const [hintMove, setHintMove] = useState(null);\n  const [promotionDialog, setPromotionDialog] = useState(null);\n\n  // Check for check, checkmate, or stalemate after each move\n  useEffect(() => {\n    if (gameStatus !== 'ongoing') return;\n    const currentPlayer = playerTurn;\n    const opponent = currentPlayer === 'white' ? 'black' : 'white';\n\n    // Check if the current player is in check\n    if (isInCheck(board, currentPlayer)) {\n      setCheckIndicator(currentPlayer);\n\n      // Check if it's checkmate\n      if (isCheckmate(board, currentPlayer)) {\n        setGameStatus(`${opponent} wins by checkmate`);\n        return;\n      }\n    } else {\n      setCheckIndicator(null);\n\n      // Check if it's stalemate\n      if (isStalemate(board, currentPlayer)) {\n        setGameStatus('draw by stalemate');\n        return;\n      }\n    }\n  }, [board, playerTurn, gameStatus]);\n\n  // Calculate valid moves for the selected piece\n  useEffect(() => {\n    if (selectedPiece) {\n      const validMoves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n            validMoves.push({\n              row,\n              col\n            });\n          }\n        }\n      }\n      setHighlightedSquares(validMoves);\n    } else {\n      setHighlightedSquares([]);\n    }\n  }, [selectedPiece, board, gameState]);\n\n  // AI's turn\n  useEffect(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing' && !promotionDialog) {\n      // AI thinking time varies by difficulty\n      const thinkingTimes = {\n        'easy': [300, 700],\n        'medium': [500, 1000],\n        'hard': [800, 1500]\n      };\n      const [minTime, maxTime] = thinkingTimes[aiDifficulty];\n      const aiThinkingTime = Math.random() * (maxTime - minTime) + minTime;\n      const aiMoveTimeout = setTimeout(() => {\n        // AI search depth varies by difficulty\n        const searchDepth = {\n          'easy': 1,\n          'medium': 2,\n          'hard': 3\n        }[aiDifficulty];\n        const aiMove = getAIMove(board, 'black', gameState, searchDepth);\n        if (aiMove) {\n          const {\n            fromRow,\n            fromCol,\n            toRow,\n            toCol\n          } = aiMove;\n          const aiPiece = board[fromRow][fromCol];\n\n          // Check if this is a pawn promotion\n          if (isPawnPromotion(aiPiece, toRow)) {\n            // AI always promotes to queen\n            const {\n              board: newBoard,\n              gameState: newGameState\n            } = makeMove(board, fromRow, fromCol, toRow, toCol, gameState, 'queen');\n\n            // Create move notation\n            const fromSquare = `${String.fromCharCode(97 + fromCol)}${8 - fromRow}`;\n            const toSquare = `${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n            const captureSymbol = board[toRow][toCol] ? 'x' : '';\n            let moveNotation = `${fromSquare}${captureSymbol}${toSquare}=Q`;\n\n            // Check if the move results in check or checkmate\n            if (isCheckmate(newBoard, 'white')) {\n              moveNotation += '#';\n            } else if (isInCheck(newBoard, 'white')) {\n              moveNotation += '+';\n            }\n\n            // Update the game state\n            setBoard(newBoard);\n            setGameState(newGameState);\n            setMoveHistory([...moveHistory, {\n              notation: moveNotation,\n              color: 'black',\n              from: {\n                row: fromRow,\n                col: fromCol\n              },\n              to: {\n                row: toRow,\n                col: toCol\n              },\n              capturedPiece: board[toRow][toCol],\n              promotion: 'queen'\n            }]);\n            setPlayerTurn('white');\n            setShowHint(false);\n            setHintMove(null);\n          } else {\n            // Regular move\n            const {\n              board: newBoard,\n              gameState: newGameState\n            } = makeMove(board, fromRow, fromCol, toRow, toCol, gameState);\n\n            // Create move notation\n            const pieceSymbol = getPieceSymbol(aiPiece.type);\n            const fromSquare = `${String.fromCharCode(97 + fromCol)}${8 - fromRow}`;\n            const toSquare = `${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n            const captureSymbol = board[toRow][toCol] ? 'x' : '';\n            let moveNotation = `${pieceSymbol}${fromSquare}${captureSymbol}${toSquare}`;\n\n            // Check if the move results in check or checkmate\n            if (isCheckmate(newBoard, 'white')) {\n              moveNotation += '#';\n            } else if (isInCheck(newBoard, 'white')) {\n              moveNotation += '+';\n            }\n\n            // Update the game state\n            setBoard(newBoard);\n            setGameState(newGameState);\n            setMoveHistory([...moveHistory, {\n              notation: moveNotation,\n              color: 'black',\n              from: {\n                row: fromRow,\n                col: fromCol\n              },\n              to: {\n                row: toRow,\n                col: toCol\n              },\n              capturedPiece: board[toRow][toCol]\n            }]);\n            setPlayerTurn('white');\n            setShowHint(false);\n            setHintMove(null);\n          }\n        }\n      }, aiThinkingTime);\n      return () => clearTimeout(aiMoveTimeout);\n    }\n  }, [playerTurn, board, gameStatus, gameState, moveHistory, aiDifficulty, promotionDialog]);\n  const getPieceSymbol = pieceType => {\n    switch (pieceType) {\n      case 'pawn':\n        return '';\n      case 'knight':\n        return 'N';\n      case 'bishop':\n        return 'B';\n      case 'rook':\n        return 'R';\n      case 'queen':\n        return 'Q';\n      case 'king':\n        return 'K';\n      default:\n        return '';\n    }\n  };\n  const handleSquareClick = (row, col) => {\n    // If game is over or promotion dialog is open, don't allow any moves\n    if (gameStatus !== 'ongoing' || promotionDialog) return;\n\n    // If it's not the player's turn, don't allow any moves\n    if (playerTurn !== 'white') return;\n    const piece = board[row][col];\n\n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setSelectedPiece(null);\n        return;\n      }\n\n      // If clicking on a different piece of the same color, select that piece instead\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({\n          row,\n          col,\n          piece\n        });\n        return;\n      }\n\n      // Try to make a move\n      if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n        // Check if this is a pawn promotion\n        if (isPawnPromotion(selectedPiece.piece, row)) {\n          // Show promotion dialog\n          const boardRect = document.querySelector('.chess-board').getBoundingClientRect();\n          const squareSize = boardRect.width / 8;\n          setPromotionDialog({\n            fromRow: selectedPiece.row,\n            fromCol: selectedPiece.col,\n            toRow: row,\n            toCol: col,\n            position: {\n              x: boardRect.left + col * squareSize + squareSize / 2,\n              y: boardRect.top + row * squareSize + squareSize / 2\n            }\n          });\n          return;\n        }\n\n        // Regular move\n        const {\n          board: newBoard,\n          gameState: newGameState\n        } = makeMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState);\n\n        // Create move notation\n        const pieceSymbol = getPieceSymbol(selectedPiece.piece.type);\n        const fromSquare = `${String.fromCharCode(97 + selectedPiece.col)}${8 - selectedPiece.row}`;\n        const toSquare = `${String.fromCharCode(97 + col)}${8 - row}`;\n        const captureSymbol = board[row][col] ? 'x' : '';\n        let moveNotation = `${pieceSymbol}${fromSquare}${captureSymbol}${toSquare}`;\n\n        // Check if the move results in check or checkmate\n        if (isCheckmate(newBoard, 'black')) {\n          moveNotation += '#';\n        } else if (isInCheck(newBoard, 'black')) {\n          moveNotation += '+';\n        }\n\n        // Update the game state\n        setBoard(newBoard);\n        setGameState(newGameState);\n        setMoveHistory([...moveHistory, {\n          notation: moveNotation,\n          color: 'white',\n          from: {\n            row: selectedPiece.row,\n            col: selectedPiece.col\n          },\n          to: {\n            row,\n            col\n          },\n          capturedPiece: board[row][col]\n        }]);\n        setSelectedPiece(null);\n        setPlayerTurn('black');\n        setShowHint(false);\n        setHintMove(null);\n      }\n    } else {\n      // If no piece is selected and clicked on a piece of the player's color, select it\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({\n          row,\n          col,\n          piece\n        });\n      }\n    }\n  };\n  const handlePromotion = pieceType => {\n    if (!promotionDialog) return;\n    const {\n      fromRow,\n      fromCol,\n      toRow,\n      toCol\n    } = promotionDialog;\n\n    // Make the move with promotion\n    const {\n      board: newBoard,\n      gameState: newGameState\n    } = makeMove(board, fromRow, fromCol, toRow, toCol, gameState, pieceType);\n\n    // Create move notation\n    const fromSquare = `${String.fromCharCode(97 + fromCol)}${8 - fromRow}`;\n    const toSquare = `${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n    const captureSymbol = board[toRow][toCol] ? 'x' : '';\n    const promotionSymbol = pieceType === 'knight' ? 'N' : pieceType.charAt(0).toUpperCase();\n    let moveNotation = `${fromSquare}${captureSymbol}${toSquare}=${promotionSymbol}`;\n\n    // Check if the move results in check or checkmate\n    if (isCheckmate(newBoard, 'black')) {\n      moveNotation += '#';\n    } else if (isInCheck(newBoard, 'black')) {\n      moveNotation += '+';\n    }\n\n    // Update the game state\n    setBoard(newBoard);\n    setGameState(newGameState);\n    setMoveHistory([...moveHistory, {\n      notation: moveNotation,\n      color: 'white',\n      from: {\n        row: fromRow,\n        col: fromCol\n      },\n      to: {\n        row: toRow,\n        col: toCol\n      },\n      capturedPiece: board[toRow][toCol],\n      promotion: pieceType\n    }]);\n    setSelectedPiece(null);\n    setPlayerTurn('black');\n    setPromotionDialog(null);\n    setShowHint(false);\n    setHintMove(null);\n  };\n  const resetGame = () => {\n    setBoard(initializeBoard());\n    setSelectedPiece(null);\n    setPlayerTurn('white');\n    setGameStatus('ongoing');\n    setMoveHistory([]);\n    setGameState({\n      enPassantTarget: null,\n      castlingRights: {\n        white: {\n          kingSide: true,\n          queenSide: true\n        },\n        black: {\n          kingSide: true,\n          queenSide: true\n        }\n      }\n    });\n    setHighlightedSquares([]);\n    setCheckIndicator(null);\n    setShowHint(false);\n    setHintMove(null);\n    setPromotionDialog(null);\n  };\n  const handleDifficultyChange = difficulty => {\n    setAiDifficulty(difficulty);\n    // Optionally reset the game when difficulty changes\n    if (window.confirm('Change AI difficulty? Current game will be reset.')) {\n      resetGame();\n    }\n  };\n  const getHint = () => {\n    // Use the AI to suggest a move for the player\n    if (playerTurn === 'white' && gameStatus === 'ongoing') {\n      const suggestedMove = getAIMove(board, 'white', gameState, 2);\n      if (suggestedMove) {\n        setShowHint(true);\n        setHintMove(suggestedMove);\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 9\n    }\n  }, \"AI Chess\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"author-credits\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 11\n    }\n  }, \"Created by Aditya Thakkar\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"difficulty-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 9\n    }\n  }, \"AI Difficulty:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'easy' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('easy'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 11\n    }\n  }, \"Easy\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'medium' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('medium'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 11\n    }\n  }, \"Medium\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'hard' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('hard'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 11\n    }\n  }, \"Hard\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ChessBoard, {\n    board: board,\n    selectedPiece: selectedPiece,\n    onSquareClick: handleSquareClick,\n    highlightedSquares: highlightedSquares,\n    checkIndicator: checkIndicator,\n    lastMove: moveHistory.length > 0 ? moveHistory[moveHistory.length - 1] : null,\n    hintMove: showHint ? hintMove : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GameInfo, {\n    playerTurn: playerTurn,\n    gameStatus: gameStatus,\n    moveHistory: moveHistory,\n    onResetGame: resetGame,\n    isInCheck: checkIndicator !== null,\n    aiDifficulty: aiDifficulty,\n    onGetHint: getHint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 9\n    }\n  })), promotionDialog && /*#__PURE__*/React.createElement(PromotionDialog, {\n    position: promotionDialog.position,\n    color: \"white\",\n    onSelect: handlePromotion,\n    onCancel: () => setPromotionDialog(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 11\n    }\n  }, \"Chess AI with Minimax Algorithm & Alpha-Beta Pruning\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 11\n    }\n  }, \"\\xA9 \", new Date().getFullYear(), \" AI Chess by Aditya Thakkar\"))));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","ChessBoard","GameInfo","PromotionDialog","initializeBoard","isValidMove","makeMove","getAIMove","isInCheck","isCheckmate","isStalemate","isPawnPromotion","App","board","setBoard","selectedPiece","setSelectedPiece","playerTurn","setPlayerTurn","gameStatus","setGameStatus","moveHistory","setMoveHistory","gameState","setGameState","enPassantTarget","castlingRights","white","kingSide","queenSide","black","highlightedSquares","setHighlightedSquares","checkIndicator","setCheckIndicator","aiDifficulty","setAiDifficulty","showHint","setShowHint","hintMove","setHintMove","promotionDialog","setPromotionDialog","currentPlayer","opponent","validMoves","row","col","push","thinkingTimes","minTime","maxTime","aiThinkingTime","Math","random","aiMoveTimeout","setTimeout","searchDepth","aiMove","fromRow","fromCol","toRow","toCol","aiPiece","newBoard","newGameState","fromSquare","String","fromCharCode","toSquare","captureSymbol","moveNotation","notation","color","from","to","capturedPiece","promotion","pieceSymbol","getPieceSymbol","type","clearTimeout","pieceType","handleSquareClick","piece","boardRect","document","querySelector","getBoundingClientRect","squareSize","width","position","x","left","y","top","handlePromotion","promotionSymbol","charAt","toUpperCase","resetGame","handleDifficultyChange","difficulty","window","confirm","getHint","suggestedMove","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSquareClick","lastMove","length","onResetGame","onGetHint","onSelect","onCancel","Date","getFullYear"],"sources":["/Users/aditya.thakkar/Documents/AI Chess/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport PromotionDialog from './components/PromotionDialog';\nimport { \n  initializeBoard, \n  isValidMove, \n  makeMove, \n  getAIMove, \n  isInCheck, \n  isCheckmate, \n  isStalemate,\n  isPawnPromotion\n} from './utils/chessLogic';\n\nfunction App() {\n  const [board, setBoard] = useState(initializeBoard());\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [playerTurn, setPlayerTurn] = useState('white');\n  const [gameStatus, setGameStatus] = useState('ongoing');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameState, setGameState] = useState({\n    enPassantTarget: null,\n    castlingRights: {\n      white: { kingSide: true, queenSide: true },\n      black: { kingSide: true, queenSide: true }\n    }\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState([]);\n  const [checkIndicator, setCheckIndicator] = useState(null);\n  const [aiDifficulty, setAiDifficulty] = useState('medium'); // 'easy', 'medium', 'hard'\n  const [showHint, setShowHint] = useState(false);\n  const [hintMove, setHintMove] = useState(null);\n  const [promotionDialog, setPromotionDialog] = useState(null);\n\n  // Check for check, checkmate, or stalemate after each move\n  useEffect(() => {\n    if (gameStatus !== 'ongoing') return;\n\n    const currentPlayer = playerTurn;\n    const opponent = currentPlayer === 'white' ? 'black' : 'white';\n\n    // Check if the current player is in check\n    if (isInCheck(board, currentPlayer)) {\n      setCheckIndicator(currentPlayer);\n      \n      // Check if it's checkmate\n      if (isCheckmate(board, currentPlayer)) {\n        setGameStatus(`${opponent} wins by checkmate`);\n        return;\n      }\n    } else {\n      setCheckIndicator(null);\n      \n      // Check if it's stalemate\n      if (isStalemate(board, currentPlayer)) {\n        setGameStatus('draw by stalemate');\n        return;\n      }\n    }\n  }, [board, playerTurn, gameStatus]);\n\n  // Calculate valid moves for the selected piece\n  useEffect(() => {\n    if (selectedPiece) {\n      const validMoves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n            validMoves.push({ row, col });\n          }\n        }\n      }\n      setHighlightedSquares(validMoves);\n    } else {\n      setHighlightedSquares([]);\n    }\n  }, [selectedPiece, board, gameState]);\n\n  // AI's turn\n  useEffect(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing' && !promotionDialog) {\n      // AI thinking time varies by difficulty\n      const thinkingTimes = {\n        'easy': [300, 700],\n        'medium': [500, 1000],\n        'hard': [800, 1500]\n      };\n      \n      const [minTime, maxTime] = thinkingTimes[aiDifficulty];\n      const aiThinkingTime = Math.random() * (maxTime - minTime) + minTime;\n      \n      const aiMoveTimeout = setTimeout(() => {\n        // AI search depth varies by difficulty\n        const searchDepth = {\n          'easy': 1,\n          'medium': 2,\n          'hard': 3\n        }[aiDifficulty];\n        \n        const aiMove = getAIMove(board, 'black', gameState, searchDepth);\n        \n        if (aiMove) {\n          const { fromRow, fromCol, toRow, toCol } = aiMove;\n          const aiPiece = board[fromRow][fromCol];\n          \n          // Check if this is a pawn promotion\n          if (isPawnPromotion(aiPiece, toRow)) {\n            // AI always promotes to queen\n            const { board: newBoard, gameState: newGameState } = makeMove(\n              board, \n              fromRow, \n              fromCol, \n              toRow, \n              toCol, \n              gameState,\n              'queen'\n            );\n            \n            // Create move notation\n            const fromSquare = `${String.fromCharCode(97 + fromCol)}${8 - fromRow}`;\n            const toSquare = `${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n            const captureSymbol = board[toRow][toCol] ? 'x' : '';\n            \n            let moveNotation = `${fromSquare}${captureSymbol}${toSquare}=Q`;\n            \n            // Check if the move results in check or checkmate\n            if (isCheckmate(newBoard, 'white')) {\n              moveNotation += '#';\n            } else if (isInCheck(newBoard, 'white')) {\n              moveNotation += '+';\n            }\n            \n            // Update the game state\n            setBoard(newBoard);\n            setGameState(newGameState);\n            setMoveHistory([...moveHistory, { \n              notation: moveNotation, \n              color: 'black',\n              from: { row: fromRow, col: fromCol },\n              to: { row: toRow, col: toCol },\n              capturedPiece: board[toRow][toCol],\n              promotion: 'queen'\n            }]);\n            setPlayerTurn('white');\n            setShowHint(false);\n            setHintMove(null);\n          } else {\n            // Regular move\n            const { board: newBoard, gameState: newGameState } = makeMove(\n              board, \n              fromRow, \n              fromCol, \n              toRow, \n              toCol, \n              gameState\n            );\n            \n            // Create move notation\n            const pieceSymbol = getPieceSymbol(aiPiece.type);\n            const fromSquare = `${String.fromCharCode(97 + fromCol)}${8 - fromRow}`;\n            const toSquare = `${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n            const captureSymbol = board[toRow][toCol] ? 'x' : '';\n            \n            let moveNotation = `${pieceSymbol}${fromSquare}${captureSymbol}${toSquare}`;\n            \n            // Check if the move results in check or checkmate\n            if (isCheckmate(newBoard, 'white')) {\n              moveNotation += '#';\n            } else if (isInCheck(newBoard, 'white')) {\n              moveNotation += '+';\n            }\n            \n            // Update the game state\n            setBoard(newBoard);\n            setGameState(newGameState);\n            setMoveHistory([...moveHistory, { \n              notation: moveNotation, \n              color: 'black',\n              from: { row: fromRow, col: fromCol },\n              to: { row: toRow, col: toCol },\n              capturedPiece: board[toRow][toCol]\n            }]);\n            setPlayerTurn('white');\n            setShowHint(false);\n            setHintMove(null);\n          }\n        }\n      }, aiThinkingTime);\n      \n      return () => clearTimeout(aiMoveTimeout);\n    }\n  }, [playerTurn, board, gameStatus, gameState, moveHistory, aiDifficulty, promotionDialog]);\n\n  const getPieceSymbol = (pieceType) => {\n    switch (pieceType) {\n      case 'pawn': return '';\n      case 'knight': return 'N';\n      case 'bishop': return 'B';\n      case 'rook': return 'R';\n      case 'queen': return 'Q';\n      case 'king': return 'K';\n      default: return '';\n    }\n  };\n\n  const handleSquareClick = (row, col) => {\n    // If game is over or promotion dialog is open, don't allow any moves\n    if (gameStatus !== 'ongoing' || promotionDialog) return;\n    \n    // If it's not the player's turn, don't allow any moves\n    if (playerTurn !== 'white') return;\n    \n    const piece = board[row][col];\n    \n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setSelectedPiece(null);\n        return;\n      }\n      \n      // If clicking on a different piece of the same color, select that piece instead\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({ row, col, piece });\n        return;\n      }\n      \n      // Try to make a move\n      if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n        // Check if this is a pawn promotion\n        if (isPawnPromotion(selectedPiece.piece, row)) {\n          // Show promotion dialog\n          const boardRect = document.querySelector('.chess-board').getBoundingClientRect();\n          const squareSize = boardRect.width / 8;\n          \n          setPromotionDialog({\n            fromRow: selectedPiece.row,\n            fromCol: selectedPiece.col,\n            toRow: row,\n            toCol: col,\n            position: {\n              x: boardRect.left + col * squareSize + squareSize / 2,\n              y: boardRect.top + row * squareSize + squareSize / 2\n            }\n          });\n          return;\n        }\n        \n        // Regular move\n        const { board: newBoard, gameState: newGameState } = makeMove(\n          board, \n          selectedPiece.row, \n          selectedPiece.col, \n          row, \n          col, \n          gameState\n        );\n        \n        // Create move notation\n        const pieceSymbol = getPieceSymbol(selectedPiece.piece.type);\n        const fromSquare = `${String.fromCharCode(97 + selectedPiece.col)}${8 - selectedPiece.row}`;\n        const toSquare = `${String.fromCharCode(97 + col)}${8 - row}`;\n        const captureSymbol = board[row][col] ? 'x' : '';\n        \n        let moveNotation = `${pieceSymbol}${fromSquare}${captureSymbol}${toSquare}`;\n        \n        // Check if the move results in check or checkmate\n        if (isCheckmate(newBoard, 'black')) {\n          moveNotation += '#';\n        } else if (isInCheck(newBoard, 'black')) {\n          moveNotation += '+';\n        }\n        \n        // Update the game state\n        setBoard(newBoard);\n        setGameState(newGameState);\n        setMoveHistory([...moveHistory, { \n          notation: moveNotation, \n          color: 'white',\n          from: { row: selectedPiece.row, col: selectedPiece.col },\n          to: { row, col },\n          capturedPiece: board[row][col]\n        }]);\n        setSelectedPiece(null);\n        setPlayerTurn('black');\n        setShowHint(false);\n        setHintMove(null);\n      }\n    } else {\n      // If no piece is selected and clicked on a piece of the player's color, select it\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({ row, col, piece });\n      }\n    }\n  };\n\n  const handlePromotion = (pieceType) => {\n    if (!promotionDialog) return;\n    \n    const { fromRow, fromCol, toRow, toCol } = promotionDialog;\n    \n    // Make the move with promotion\n    const { board: newBoard, gameState: newGameState } = makeMove(\n      board, \n      fromRow, \n      fromCol, \n      toRow, \n      toCol, \n      gameState,\n      pieceType\n    );\n    \n    // Create move notation\n    const fromSquare = `${String.fromCharCode(97 + fromCol)}${8 - fromRow}`;\n    const toSquare = `${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n    const captureSymbol = board[toRow][toCol] ? 'x' : '';\n    const promotionSymbol = pieceType === 'knight' ? 'N' : pieceType.charAt(0).toUpperCase();\n    \n    let moveNotation = `${fromSquare}${captureSymbol}${toSquare}=${promotionSymbol}`;\n    \n    // Check if the move results in check or checkmate\n    if (isCheckmate(newBoard, 'black')) {\n      moveNotation += '#';\n    } else if (isInCheck(newBoard, 'black')) {\n      moveNotation += '+';\n    }\n    \n    // Update the game state\n    setBoard(newBoard);\n    setGameState(newGameState);\n    setMoveHistory([...moveHistory, { \n      notation: moveNotation, \n      color: 'white',\n      from: { row: fromRow, col: fromCol },\n      to: { row: toRow, col: toCol },\n      capturedPiece: board[toRow][toCol],\n      promotion: pieceType\n    }]);\n    setSelectedPiece(null);\n    setPlayerTurn('black');\n    setPromotionDialog(null);\n    setShowHint(false);\n    setHintMove(null);\n  };\n\n  const resetGame = () => {\n    setBoard(initializeBoard());\n    setSelectedPiece(null);\n    setPlayerTurn('white');\n    setGameStatus('ongoing');\n    setMoveHistory([]);\n    setGameState({\n      enPassantTarget: null,\n      castlingRights: {\n        white: { kingSide: true, queenSide: true },\n        black: { kingSide: true, queenSide: true }\n      }\n    });\n    setHighlightedSquares([]);\n    setCheckIndicator(null);\n    setShowHint(false);\n    setHintMove(null);\n    setPromotionDialog(null);\n  };\n\n  const handleDifficultyChange = (difficulty) => {\n    setAiDifficulty(difficulty);\n    // Optionally reset the game when difficulty changes\n    if (window.confirm('Change AI difficulty? Current game will be reset.')) {\n      resetGame();\n    }\n  };\n\n  const getHint = () => {\n    // Use the AI to suggest a move for the player\n    if (playerTurn === 'white' && gameStatus === 'ongoing') {\n      const suggestedMove = getAIMove(board, 'white', gameState, 2);\n      if (suggestedMove) {\n        setShowHint(true);\n        setHintMove(suggestedMove);\n      }\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-header\">\n        <h1>AI Chess</h1>\n        <div className=\"author-credits\">\n          <span>Created by Aditya Thakkar</span>\n        </div>\n      </div>\n      <div className=\"difficulty-selector\">\n        <span className=\"difficulty-label\">AI Difficulty:</span>\n        <div className=\"difficulty-buttons\">\n          <button \n            className={`difficulty-button ${aiDifficulty === 'easy' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('easy')}\n          >\n            Easy\n          </button>\n          <button \n            className={`difficulty-button ${aiDifficulty === 'medium' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('medium')}\n          >\n            Medium\n          </button>\n          <button \n            className={`difficulty-button ${aiDifficulty === 'hard' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('hard')}\n          >\n            Hard\n          </button>\n        </div>\n      </div>\n      <div className=\"game-container\">\n        <ChessBoard \n          board={board} \n          selectedPiece={selectedPiece} \n          onSquareClick={handleSquareClick}\n          highlightedSquares={highlightedSquares}\n          checkIndicator={checkIndicator}\n          lastMove={moveHistory.length > 0 ? moveHistory[moveHistory.length - 1] : null}\n          hintMove={showHint ? hintMove : null}\n        />\n        <GameInfo \n          playerTurn={playerTurn} \n          gameStatus={gameStatus} \n          moveHistory={moveHistory} \n          onResetGame={resetGame} \n          isInCheck={checkIndicator !== null}\n          aiDifficulty={aiDifficulty}\n          onGetHint={getHint}\n        />\n      </div>\n      {promotionDialog && (\n        <PromotionDialog \n          position={promotionDialog.position}\n          color=\"white\"\n          onSelect={handlePromotion}\n          onCancel={() => setPromotionDialog(null)}\n        />\n      )}\n      <div className=\"app-footer\">\n        <div className=\"footer-content\">\n          <p>Chess AI with Minimax Algorithm & Alpha-Beta Pruning</p>\n          <p>© {new Date().getFullYear()} AI Chess by Aditya Thakkar</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}