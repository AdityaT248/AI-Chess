{"ast":null,"code":"import { makeMove, isValidMove,\n// eslint-disable-next-line no-unused-vars\nisInCheck, isCheckmate, isStalemate } from './chessLogic';\n\n// Piece values for evaluation\nconst pieceValues = {\n  'pawn': 10,\n  'knight': 30,\n  'bishop': 30,\n  'rook': 50,\n  'queen': 90,\n  'king': 900\n};\n\n// Position bonuses to encourage good piece placement\nconst positionBonus = {\n  'pawn': [[0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5], [1, 1, 2, 3, 3, 2, 1, 1], [0.5, 0.5, 1, 2.5, 2.5, 1, 0.5, 0.5], [0, 0, 0, 2, 2, 0, 0, 0], [0.5, -0.5, -1, 0, 0, -1, -0.5, 0.5], [0.5, 1, 1, -2, -2, 1, 1, 0.5], [0, 0, 0, 0, 0, 0, 0, 0]],\n  'knight': [[-5, -4, -3, -3, -3, -3, -4, -5], [-4, -2, 0, 0, 0, 0, -2, -4], [-3, 0, 1, 1.5, 1.5, 1, 0, -3], [-3, 0.5, 1.5, 2, 2, 1.5, 0.5, -3], [-3, 0, 1.5, 2, 2, 1.5, 0, -3], [-3, 0.5, 1, 1.5, 1.5, 1, 0.5, -3], [-4, -2, 0, 0.5, 0.5, 0, -2, -4], [-5, -4, -3, -3, -3, -3, -4, -5]],\n  'bishop': [[-2, -1, -1, -1, -1, -1, -1, -2], [-1, 0, 0, 0, 0, 0, 0, -1], [-1, 0, 0.5, 1, 1, 0.5, 0, -1], [-1, 0.5, 0.5, 1, 1, 0.5, 0.5, -1], [-1, 0, 1, 1, 1, 1, 0, -1], [-1, 1, 1, 1, 1, 1, 1, -1], [-1, 0.5, 0, 0, 0, 0, 0.5, -1], [-2, -1, -1, -1, -1, -1, -1, -2]],\n  'rook': [[0, 0, 0, 0, 0, 0, 0, 0], [0.5, 1, 1, 1, 1, 1, 1, 0.5], [-0.5, 0, 0, 0, 0, 0, 0, -0.5], [-0.5, 0, 0, 0, 0, 0, 0, -0.5], [-0.5, 0, 0, 0, 0, 0, 0, -0.5], [-0.5, 0, 0, 0, 0, 0, 0, -0.5], [-0.5, 0, 0, 0, 0, 0, 0, -0.5], [0, 0, 0, 0.5, 0.5, 0, 0, 0]],\n  'queen': [[-2, -1, -1, -0.5, -0.5, -1, -1, -2], [-1, 0, 0, 0, 0, 0, 0, -1], [-1, 0, 0.5, 0.5, 0.5, 0.5, 0, -1], [-0.5, 0, 0.5, 0.5, 0.5, 0.5, 0, -0.5], [0, 0, 0.5, 0.5, 0.5, 0.5, 0, -0.5], [-1, 0.5, 0.5, 0.5, 0.5, 0.5, 0, -1], [-1, 0, 0.5, 0, 0, 0, 0, -1], [-2, -1, -1, -0.5, -0.5, -1, -1, -2]],\n  'king': [[-3, -4, -4, -5, -5, -4, -4, -3], [-3, -4, -4, -5, -5, -4, -4, -3], [-3, -4, -4, -5, -5, -4, -4, -3], [-3, -4, -4, -5, -5, -4, -4, -3], [-2, -3, -3, -4, -4, -3, -3, -2], [-1, -2, -2, -2, -2, -2, -2, -1], [2, 2, 0, 0, 0, 0, 2, 2], [2, 3, 1, 0, 0, 1, 3, 2]]\n};\n\n// Evaluate a single move\nconst evaluateMove = (board, move, gameState) => {\n  const {\n    fromRow,\n    fromCol,\n    toRow,\n    toCol\n  } = move;\n  const piece = board[fromRow][fromCol];\n  const targetPiece = board[toRow][toCol];\n  let score = 0;\n\n  // Capture value\n  if (targetPiece) {\n    score += pieceValues[targetPiece.type] * 2; // Prioritize captures\n  }\n\n  // Position improvement\n  const currentPositionValue = positionBonus[piece.type][piece.color === 'white' ? fromRow : 7 - fromRow][fromCol];\n  const newPositionValue = positionBonus[piece.type][piece.color === 'white' ? toRow : 7 - toRow][toCol];\n  score += (newPositionValue - currentPositionValue) * 0.5;\n\n  // Center control bonus\n  const centerDistance = Math.abs(3.5 - toRow) + Math.abs(3.5 - toCol);\n  score += (7 - centerDistance) * 0.2;\n\n  // Pawn advancement bonus\n  if (piece.type === 'pawn') {\n    const advancementBonus = piece.color === 'white' ? 7 - toRow : toRow;\n    score += advancementBonus * 0.5;\n\n    // Bonus for pawns near promotion\n    if (piece.color === 'white' && toRow <= 1 || piece.color === 'black' && toRow >= 6) {\n      score += 5;\n    }\n  }\n\n  // Avoid moving the king early in the game\n  if (piece.type === 'king') {\n    score -= 2;\n  }\n\n  // Encourage development of knights and bishops early\n  if ((piece.type === 'knight' || piece.type === 'bishop') && (piece.color === 'white' && fromRow === 7 || piece.color === 'black' && fromRow === 0)) {\n    score += 1;\n  }\n  return score;\n};\n\n// Generate all valid moves for a player\nconst generateMoves = (board, color, gameState) => {\n  const moves = [];\n  for (let fromRow = 0; fromRow < 8; fromRow++) {\n    for (let fromCol = 0; fromCol < 8; fromCol++) {\n      const piece = board[fromRow][fromCol];\n      if (piece && piece.color === color && !piece.captured) {\n        for (let toRow = 0; toRow < 8; toRow++) {\n          for (let toCol = 0; toCol < 8; toCol++) {\n            if (isValidMove(board, fromRow, fromCol, toRow, toCol, gameState)) {\n              // Check if this is a capture move\n              const isCapture = board[toRow][toCol] !== null;\n              moves.push({\n                fromRow,\n                fromCol,\n                toRow,\n                toCol,\n                isCapture,\n                piece: piece.type\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  return moves;\n};\n\n// Find the best move using a simple greedy algorithm\nexport const findBestMove = (board, color, gameState, difficulty = 'medium') => {\n  // Generate all valid moves\n  let moves = generateMoves(board, color, gameState);\n\n  // If no valid moves, return null\n  if (moves.length === 0) {\n    return null;\n  }\n\n  // If only one move is available, return it immediately\n  if (moves.length === 1) {\n    return moves[0];\n  }\n\n  // Add randomness based on difficulty\n  const randomChance = difficulty === 'easy' ? 0.3 : difficulty === 'medium' ? 0.15 : 0.05;\n  if (Math.random() < randomChance) {\n    const randomIndex = Math.floor(Math.random() * moves.length);\n    return moves[randomIndex];\n  }\n\n  // Evaluate each move\n  const evaluatedMoves = moves.map(move => {\n    const score = evaluateMove(board, move, gameState);\n    return {\n      ...move,\n      score\n    };\n  });\n\n  // Sort moves by score (descending for white, ascending for black)\n  evaluatedMoves.sort((a, b) => {\n    return color === 'white' ? b.score - a.score : a.score - b.score;\n  });\n\n  // Add some randomness to the top moves based on difficulty\n  const topMovesCount = difficulty === 'easy' ? 5 : difficulty === 'medium' ? 3 : 2;\n  const topMoves = evaluatedMoves.slice(0, Math.min(topMovesCount, evaluatedMoves.length));\n\n  // Select a random move from the top moves\n  const selectedIndex = Math.floor(Math.random() * topMoves.length);\n  return topMoves[selectedIndex];\n};\n\n// Export a function that matches the getAIMove signature from chessLogic\nexport const getAIMove = (board, color, gameState, difficulty) => {\n  return findBestMove(board, color, gameState, difficulty);\n};","map":{"version":3,"names":["makeMove","isValidMove","isInCheck","isCheckmate","isStalemate","pieceValues","positionBonus","evaluateMove","board","move","gameState","fromRow","fromCol","toRow","toCol","piece","targetPiece","score","type","currentPositionValue","color","newPositionValue","centerDistance","Math","abs","advancementBonus","generateMoves","moves","captured","isCapture","push","findBestMove","difficulty","length","randomChance","random","randomIndex","floor","evaluatedMoves","map","sort","a","b","topMovesCount","topMoves","slice","min","selectedIndex","getAIMove"],"sources":["/Users/aditya.thakkar/Documents/AI Chess/src/utils/aiPlayer.js"],"sourcesContent":["import { \n  makeMove, \n  isValidMove, \n  // eslint-disable-next-line no-unused-vars\n  isInCheck, \n  isCheckmate, \n  isStalemate \n} from './chessLogic';\n\n// Piece values for evaluation\nconst pieceValues = {\n  'pawn': 10,\n  'knight': 30,\n  'bishop': 30,\n  'rook': 50,\n  'queen': 90,\n  'king': 900\n};\n\n// Position bonuses to encourage good piece placement\nconst positionBonus = {\n  'pawn': [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [5, 5, 5, 5, 5, 5, 5, 5],\n    [1, 1, 2, 3, 3, 2, 1, 1],\n    [0.5, 0.5, 1, 2.5, 2.5, 1, 0.5, 0.5],\n    [0, 0, 0, 2, 2, 0, 0, 0],\n    [0.5, -0.5, -1, 0, 0, -1, -0.5, 0.5],\n    [0.5, 1, 1, -2, -2, 1, 1, 0.5],\n    [0, 0, 0, 0, 0, 0, 0, 0]\n  ],\n  'knight': [\n    [-5, -4, -3, -3, -3, -3, -4, -5],\n    [-4, -2, 0, 0, 0, 0, -2, -4],\n    [-3, 0, 1, 1.5, 1.5, 1, 0, -3],\n    [-3, 0.5, 1.5, 2, 2, 1.5, 0.5, -3],\n    [-3, 0, 1.5, 2, 2, 1.5, 0, -3],\n    [-3, 0.5, 1, 1.5, 1.5, 1, 0.5, -3],\n    [-4, -2, 0, 0.5, 0.5, 0, -2, -4],\n    [-5, -4, -3, -3, -3, -3, -4, -5]\n  ],\n  'bishop': [\n    [-2, -1, -1, -1, -1, -1, -1, -2],\n    [-1, 0, 0, 0, 0, 0, 0, -1],\n    [-1, 0, 0.5, 1, 1, 0.5, 0, -1],\n    [-1, 0.5, 0.5, 1, 1, 0.5, 0.5, -1],\n    [-1, 0, 1, 1, 1, 1, 0, -1],\n    [-1, 1, 1, 1, 1, 1, 1, -1],\n    [-1, 0.5, 0, 0, 0, 0, 0.5, -1],\n    [-2, -1, -1, -1, -1, -1, -1, -2]\n  ],\n  'rook': [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0.5, 1, 1, 1, 1, 1, 1, 0.5],\n    [-0.5, 0, 0, 0, 0, 0, 0, -0.5],\n    [-0.5, 0, 0, 0, 0, 0, 0, -0.5],\n    [-0.5, 0, 0, 0, 0, 0, 0, -0.5],\n    [-0.5, 0, 0, 0, 0, 0, 0, -0.5],\n    [-0.5, 0, 0, 0, 0, 0, 0, -0.5],\n    [0, 0, 0, 0.5, 0.5, 0, 0, 0]\n  ],\n  'queen': [\n    [-2, -1, -1, -0.5, -0.5, -1, -1, -2],\n    [-1, 0, 0, 0, 0, 0, 0, -1],\n    [-1, 0, 0.5, 0.5, 0.5, 0.5, 0, -1],\n    [-0.5, 0, 0.5, 0.5, 0.5, 0.5, 0, -0.5],\n    [0, 0, 0.5, 0.5, 0.5, 0.5, 0, -0.5],\n    [-1, 0.5, 0.5, 0.5, 0.5, 0.5, 0, -1],\n    [-1, 0, 0.5, 0, 0, 0, 0, -1],\n    [-2, -1, -1, -0.5, -0.5, -1, -1, -2]\n  ],\n  'king': [\n    [-3, -4, -4, -5, -5, -4, -4, -3],\n    [-3, -4, -4, -5, -5, -4, -4, -3],\n    [-3, -4, -4, -5, -5, -4, -4, -3],\n    [-3, -4, -4, -5, -5, -4, -4, -3],\n    [-2, -3, -3, -4, -4, -3, -3, -2],\n    [-1, -2, -2, -2, -2, -2, -2, -1],\n    [2, 2, 0, 0, 0, 0, 2, 2],\n    [2, 3, 1, 0, 0, 1, 3, 2]\n  ]\n};\n\n// Evaluate a single move\nconst evaluateMove = (board, move, gameState) => {\n  const { fromRow, fromCol, toRow, toCol } = move;\n  const piece = board[fromRow][fromCol];\n  const targetPiece = board[toRow][toCol];\n  \n  let score = 0;\n  \n  // Capture value\n  if (targetPiece) {\n    score += pieceValues[targetPiece.type] * 2; // Prioritize captures\n  }\n  \n  // Position improvement\n  const currentPositionValue = positionBonus[piece.type][piece.color === 'white' ? fromRow : 7 - fromRow][fromCol];\n  const newPositionValue = positionBonus[piece.type][piece.color === 'white' ? toRow : 7 - toRow][toCol];\n  score += (newPositionValue - currentPositionValue) * 0.5;\n  \n  // Center control bonus\n  const centerDistance = Math.abs(3.5 - toRow) + Math.abs(3.5 - toCol);\n  score += (7 - centerDistance) * 0.2;\n  \n  // Pawn advancement bonus\n  if (piece.type === 'pawn') {\n    const advancementBonus = piece.color === 'white' ? (7 - toRow) : toRow;\n    score += advancementBonus * 0.5;\n    \n    // Bonus for pawns near promotion\n    if ((piece.color === 'white' && toRow <= 1) || (piece.color === 'black' && toRow >= 6)) {\n      score += 5;\n    }\n  }\n  \n  // Avoid moving the king early in the game\n  if (piece.type === 'king') {\n    score -= 2;\n  }\n  \n  // Encourage development of knights and bishops early\n  if ((piece.type === 'knight' || piece.type === 'bishop') && \n      ((piece.color === 'white' && fromRow === 7) || (piece.color === 'black' && fromRow === 0))) {\n    score += 1;\n  }\n  \n  return score;\n};\n\n// Generate all valid moves for a player\nconst generateMoves = (board, color, gameState) => {\n  const moves = [];\n  \n  for (let fromRow = 0; fromRow < 8; fromRow++) {\n    for (let fromCol = 0; fromCol < 8; fromCol++) {\n      const piece = board[fromRow][fromCol];\n      \n      if (piece && piece.color === color && !piece.captured) {\n        for (let toRow = 0; toRow < 8; toRow++) {\n          for (let toCol = 0; toCol < 8; toCol++) {\n            if (isValidMove(board, fromRow, fromCol, toRow, toCol, gameState)) {\n              // Check if this is a capture move\n              const isCapture = board[toRow][toCol] !== null;\n              \n              moves.push({\n                fromRow,\n                fromCol,\n                toRow,\n                toCol,\n                isCapture,\n                piece: piece.type\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  return moves;\n};\n\n// Find the best move using a simple greedy algorithm\nexport const findBestMove = (board, color, gameState, difficulty = 'medium') => {\n  // Generate all valid moves\n  let moves = generateMoves(board, color, gameState);\n  \n  // If no valid moves, return null\n  if (moves.length === 0) {\n    return null;\n  }\n  \n  // If only one move is available, return it immediately\n  if (moves.length === 1) {\n    return moves[0];\n  }\n  \n  // Add randomness based on difficulty\n  const randomChance = difficulty === 'easy' ? 0.3 : (difficulty === 'medium' ? 0.15 : 0.05);\n  if (Math.random() < randomChance) {\n    const randomIndex = Math.floor(Math.random() * moves.length);\n    return moves[randomIndex];\n  }\n  \n  // Evaluate each move\n  const evaluatedMoves = moves.map(move => {\n    const score = evaluateMove(board, move, gameState);\n    return { ...move, score };\n  });\n  \n  // Sort moves by score (descending for white, ascending for black)\n  evaluatedMoves.sort((a, b) => {\n    return color === 'white' ? b.score - a.score : a.score - b.score;\n  });\n  \n  // Add some randomness to the top moves based on difficulty\n  const topMovesCount = difficulty === 'easy' ? 5 : (difficulty === 'medium' ? 3 : 2);\n  const topMoves = evaluatedMoves.slice(0, Math.min(topMovesCount, evaluatedMoves.length));\n  \n  // Select a random move from the top moves\n  const selectedIndex = Math.floor(Math.random() * topMoves.length);\n  return topMoves[selectedIndex];\n};\n\n// Export a function that matches the getAIMove signature from chessLogic\nexport const getAIMove = (board, color, gameState, difficulty) => {\n  return findBestMove(board, color, gameState, difficulty);\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}