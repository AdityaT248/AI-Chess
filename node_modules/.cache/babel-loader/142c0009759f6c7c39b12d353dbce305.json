{"ast":null,"code":"var _jsxFileName = \"/Users/aditya.thakkar/Documents/AI Chess/src/App.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport PromotionDialog from './components/PromotionDialog';\nimport ThemeSelector from './components/ThemeSelector';\nimport themes from './themes';\nimport { initializeBoard, isValidMove, makeMove, isInCheck, isCheckmate, isStalemate, isPawnPromotion } from './utils/chessLogic';\nimport { findBestMove, getAIMove } from './utils/aiPlayer';\n\n// eslint-disable-next-line no-unused-vars\nfunction App() {\n  const [board, setBoard] = useState(initializeBoard());\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [playerTurn, setPlayerTurn] = useState('white');\n  const [gameStatus, setGameStatus] = useState('ongoing');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameState, setGameState] = useState({\n    enPassantTarget: null,\n    castlingRights: {\n      white: {\n        kingSide: true,\n        queenSide: true\n      },\n      black: {\n        kingSide: true,\n        queenSide: true\n      }\n    }\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState([]);\n  const [checkIndicator, setCheckIndicator] = useState(null);\n  const [aiDifficulty, setAiDifficulty] = useState('medium'); // 'easy', 'medium', 'hard'\n  const [showHint, setShowHint] = useState(false);\n  const [hintMove, setHintMove] = useState(null);\n  const [promotionDialog, setPromotionDialog] = useState(null);\n  const [currentTheme, setCurrentTheme] = useState('classic');\n  const [aiThinking, setAiThinking] = useState(false);\n\n  // Create a ref to store the handleMove function\n  const handleMoveRef = useRef(null);\n\n  // Handle move\n  const handleMove = useCallback((fromRow, fromCol, toRow, toCol, promotionPiece = null) => {\n    // eslint-disable-next-line no-unused-vars\n    const {\n      board: newBoard,\n      gameState: newGameState,\n      capturedPiece\n    } = makeMove(board, fromRow, fromCol, toRow, toCol, gameState, promotionPiece);\n    setBoard(newBoard);\n    setGameState(newGameState);\n\n    // Add move to history\n    const piece = board[fromRow][fromCol];\n    const notation = generateMoveNotation(piece, fromRow, fromCol, toRow, toCol, capturedPiece, promotionPiece);\n    const newMove = {\n      from: {\n        row: fromRow,\n        col: fromCol\n      },\n      to: {\n        row: toRow,\n        col: toCol\n      },\n      piece,\n      capturedPiece,\n      notation,\n      color: piece.color\n    };\n    setMoveHistory([...moveHistory, newMove]);\n\n    // Switch turns\n    setPlayerTurn(playerTurn === 'white' ? 'black' : 'white');\n\n    // Clear selection and highlights\n    setSelectedPiece(null);\n    setHighlightedSquares([]);\n    setShowHint(false);\n    setHintMove(null);\n  }, [board, gameState, moveHistory, playerTurn]);\n\n  // Update the ref whenever handleMove changes\n  useEffect(() => {\n    handleMoveRef.current = handleMove;\n  }, [handleMove]);\n\n  // Make AI move\n  const makeAIMove = useCallback(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing') {\n      setAiThinking(true);\n\n      // Use setTimeout to allow the UI to update before starting the AI calculation\n      setTimeout(() => {\n        try {\n          // Set a timeout to ensure the AI doesn't take too long\n          const aiMovePromise = new Promise(resolve => {\n            const aiMove = getAIMove(board, 'black', gameState, aiDifficulty);\n            resolve(aiMove);\n          });\n\n          // Add a timeout to ensure we don't wait too long\n          const timeoutPromise = new Promise(resolve => {\n            const timeoutMs = aiDifficulty === 'easy' ? 500 : aiDifficulty === 'medium' ? 1000 : 1500;\n            setTimeout(() => resolve(null), timeoutMs);\n          });\n\n          // Race between the AI calculation and the timeout\n          Promise.race([aiMovePromise, timeoutPromise]).then(aiMove => {\n            if (aiMove) {\n              const {\n                fromRow,\n                fromCol,\n                toRow,\n                toCol\n              } = aiMove;\n              const piece = board[fromRow][fromCol];\n\n              // Check if this is a pawn promotion\n              if (isPawnPromotion(piece, toRow)) {\n                // AI always promotes to queen\n                handleMoveRef.current(fromRow, fromCol, toRow, toCol, 'queen');\n              } else {\n                handleMoveRef.current(fromRow, fromCol, toRow, toCol);\n              }\n            } else {\n              // If timeout occurred, make a simple move\n              const moves = [];\n              for (let fromRow = 0; fromRow < 8; fromRow++) {\n                for (let fromCol = 0; fromCol < 8; fromCol++) {\n                  const piece = board[fromRow][fromCol];\n                  if (piece && piece.color === 'black') {\n                    for (let toRow = 0; toRow < 8; toRow++) {\n                      for (let toCol = 0; toCol < 8; toCol++) {\n                        if (isValidMove(board, fromRow, fromCol, toRow, toCol, gameState)) {\n                          moves.push({\n                            fromRow,\n                            fromCol,\n                            toRow,\n                            toCol\n                          });\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              if (moves.length > 0) {\n                const randomMove = moves[Math.floor(Math.random() * moves.length)];\n                const {\n                  fromRow,\n                  fromCol,\n                  toRow,\n                  toCol\n                } = randomMove;\n                handleMoveRef.current(fromRow, fromCol, toRow, toCol);\n              }\n            }\n            setAiThinking(false);\n          });\n        } catch (error) {\n          console.error(\"Error in AI move calculation:\", error);\n          setAiThinking(false);\n        }\n      }, 100);\n    }\n  }, [board, playerTurn, gameStatus, gameState, aiDifficulty]);\n\n  // Check for check, checkmate, or stalemate after each move\n  useEffect(() => {\n    if (moveHistory.length > 0) {\n      // Check if any king is in check\n      if (isInCheck(board, 'white')) {\n        setCheckIndicator('white');\n\n        // Check if it's checkmate\n        if (isCheckmate(board, 'white')) {\n          setGameStatus('Checkmate! Black wins.');\n        }\n      } else if (isInCheck(board, 'black')) {\n        setCheckIndicator('black');\n\n        // Check if it's checkmate\n        if (isCheckmate(board, 'black')) {\n          setGameStatus('Checkmate! White wins.');\n        }\n      } else {\n        setCheckIndicator(null);\n      }\n\n      // Check for stalemate\n      if (playerTurn === 'white' && isStalemate(board, 'white')) {\n        setGameStatus('Draw by stalemate');\n      } else if (playerTurn === 'black' && isStalemate(board, 'black')) {\n        setGameStatus('Draw by stalemate');\n      }\n    }\n  }, [board, playerTurn, moveHistory]);\n\n  // AI makes a move when it's black's turn\n  useEffect(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing') {\n      makeAIMove();\n    }\n  }, [playerTurn, gameStatus, makeAIMove]);\n\n  // Calculate valid moves for the selected piece\n  useEffect(() => {\n    if (selectedPiece) {\n      const validMoves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n            validMoves.push({\n              row,\n              col\n            });\n          }\n        }\n      }\n      setHighlightedSquares(validMoves);\n    } else {\n      setHighlightedSquares([]);\n    }\n  }, [selectedPiece, board, gameState]);\n  const getPieceSymbol = pieceType => {\n    switch (pieceType) {\n      case 'pawn':\n        return '';\n      case 'knight':\n        return 'N';\n      case 'bishop':\n        return 'B';\n      case 'rook':\n        return 'R';\n      case 'queen':\n        return 'Q';\n      case 'king':\n        return 'K';\n      default:\n        return '';\n    }\n  };\n\n  // Generate algebraic notation for a move\n  const generateMoveNotation = (piece, fromRow, fromCol, toRow, toCol, capturedPiece, promotionPiece) => {\n    const files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    const ranks = ['8', '7', '6', '5', '4', '3', '2', '1'];\n    const fromSquare = files[fromCol] + ranks[fromRow];\n    const toSquare = files[toCol] + ranks[toRow];\n    let notation = '';\n\n    // Add piece symbol (except for pawns)\n    if (piece.type !== 'pawn') {\n      notation += piece.type.charAt(0).toUpperCase();\n    }\n\n    // Add capture symbol if applicable\n    if (capturedPiece) {\n      if (piece.type === 'pawn') {\n        notation += fromSquare.charAt(0);\n      }\n      notation += 'x';\n    }\n\n    // Add destination square\n    notation += toSquare;\n\n    // Add promotion piece if applicable\n    if (promotionPiece) {\n      notation += '=' + promotionPiece.charAt(0).toUpperCase();\n    }\n    return notation;\n  };\n  const handleSquareClick = (row, col) => {\n    // If game is over or promotion dialog is open, don't allow any moves\n    if (gameStatus !== 'ongoing' || promotionDialog) return;\n\n    // If it's not the player's turn, don't allow any moves\n    if (playerTurn !== 'white') return;\n    const piece = board[row][col];\n\n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setSelectedPiece(null);\n        return;\n      }\n\n      // If clicking on a different piece of the same color, select that piece instead\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({\n          row,\n          col,\n          piece\n        });\n        return;\n      }\n\n      // Try to make a move\n      if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n        // Check if this is a pawn promotion\n        if (isPawnPromotion(selectedPiece.piece, row)) {\n          // Show promotion dialog\n          const boardRect = document.querySelector('.chess-board').getBoundingClientRect();\n          const squareSize = boardRect.width / 8;\n          setPromotionDialog({\n            fromRow: selectedPiece.row,\n            fromCol: selectedPiece.col,\n            toRow: row,\n            toCol: col,\n            position: {\n              x: boardRect.left + col * squareSize + squareSize / 2,\n              y: boardRect.top + row * squareSize + squareSize / 2\n            }\n          });\n          return;\n        }\n\n        // Regular move\n        const {\n          board: newBoard,\n          gameState: newGameState\n        } = makeMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState);\n\n        // Create move notation\n        const pieceSymbol = getPieceSymbol(selectedPiece.piece.type);\n        const fromSquare = `${String.fromCharCode(97 + selectedPiece.col)}${8 - selectedPiece.row}`;\n        const toSquare = `${String.fromCharCode(97 + col)}${8 - row}`;\n        const captureSymbol = board[row][col] ? 'x' : '';\n        let moveNotation = `${pieceSymbol}${fromSquare}${captureSymbol}${toSquare}`;\n\n        // Check if the move results in check or checkmate\n        if (isCheckmate(newBoard, 'black')) {\n          moveNotation += '#';\n        } else if (isInCheck(newBoard, 'black')) {\n          moveNotation += '+';\n        }\n\n        // Update the game state\n        setBoard(newBoard);\n        setGameState(newGameState);\n        setMoveHistory([...moveHistory, {\n          notation: moveNotation,\n          color: 'white',\n          from: {\n            row: selectedPiece.row,\n            col: selectedPiece.col\n          },\n          to: {\n            row,\n            col\n          },\n          capturedPiece: board[row][col]\n        }]);\n        setSelectedPiece(null);\n        setPlayerTurn('black');\n        setShowHint(false);\n        setHintMove(null);\n      }\n    } else {\n      // If no piece is selected and clicked on a piece of the player's color, select it\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({\n          row,\n          col,\n          piece\n        });\n      }\n    }\n  };\n  const handlePromotion = pieceType => {\n    if (!promotionDialog) return;\n    const {\n      fromRow,\n      fromCol,\n      toRow,\n      toCol\n    } = promotionDialog;\n\n    // Make the move with promotion\n    const {\n      board: newBoard,\n      gameState: newGameState\n    } = makeMove(board, fromRow, fromCol, toRow, toCol, gameState, pieceType);\n\n    // Create move notation\n    const fromSquare = `${String.fromCharCode(97 + fromCol)}${8 - fromRow}`;\n    const toSquare = `${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n    const captureSymbol = board[toRow][toCol] ? 'x' : '';\n    const promotionSymbol = pieceType === 'knight' ? 'N' : pieceType.charAt(0).toUpperCase();\n    let moveNotation = `${fromSquare}${captureSymbol}${toSquare}=${promotionSymbol}`;\n\n    // Check if the move results in check or checkmate\n    if (isCheckmate(newBoard, 'black')) {\n      moveNotation += '#';\n    } else if (isInCheck(newBoard, 'black')) {\n      moveNotation += '+';\n    }\n\n    // Update the game state\n    setBoard(newBoard);\n    setGameState(newGameState);\n    setMoveHistory([...moveHistory, {\n      notation: moveNotation,\n      color: 'white',\n      from: {\n        row: fromRow,\n        col: fromCol\n      },\n      to: {\n        row: toRow,\n        col: toCol\n      },\n      capturedPiece: board[toRow][toCol],\n      promotion: pieceType\n    }]);\n    setSelectedPiece(null);\n    setPlayerTurn('black');\n    setPromotionDialog(null);\n    setShowHint(false);\n    setHintMove(null);\n  };\n  const resetGame = () => {\n    setBoard(initializeBoard());\n    setSelectedPiece(null);\n    setPlayerTurn('white');\n    setGameStatus('ongoing');\n    setMoveHistory([]);\n    setGameState({\n      enPassantTarget: null,\n      castlingRights: {\n        white: {\n          kingSide: true,\n          queenSide: true\n        },\n        black: {\n          kingSide: true,\n          queenSide: true\n        }\n      }\n    });\n    setHighlightedSquares([]);\n    setCheckIndicator(null);\n    setShowHint(false);\n    setHintMove(null);\n    setPromotionDialog(null);\n  };\n  const handleDifficultyChange = difficulty => {\n    setAiDifficulty(difficulty);\n    resetGame();\n  };\n  const getHint = () => {\n    // Use the AI to suggest a move for the player\n    if (playerTurn === 'white' && gameStatus === 'ongoing') {\n      const suggestedMove = getAIMove(board, 'white', gameState, 2);\n      if (suggestedMove) {\n        setShowHint(true);\n        setHintMove(suggestedMove);\n      }\n    }\n  };\n\n  // Handle theme change\n  const handleThemeChange = themeKey => {\n    setCurrentTheme(themeKey);\n    // Save theme preference to localStorage\n    localStorage.setItem('chessTheme', themeKey);\n  };\n\n  // Load saved theme from localStorage on initial render\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('chessTheme');\n    if (savedTheme && themes[savedTheme]) {\n      setCurrentTheme(savedTheme);\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 9\n    }\n  }, \"AI Chess\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"author-credits\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 11\n    }\n  }, \"Created by Aditya Thakkar\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"difficulty-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 9\n    }\n  }, \"AI Difficulty:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'easy' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('easy'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 11\n    }\n  }, \"Easy\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'medium' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('medium'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 11\n    }\n  }, \"Medium\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'hard' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('hard'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 11\n    }\n  }, \"Hard\"))), /*#__PURE__*/React.createElement(ThemeSelector, {\n    currentTheme: currentTheme,\n    onThemeChange: handleThemeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ChessBoard, {\n    board: board,\n    selectedPiece: selectedPiece,\n    onSquareClick: handleSquareClick,\n    highlightedSquares: highlightedSquares,\n    checkIndicator: checkIndicator,\n    lastMove: moveHistory.length > 0 ? moveHistory[moveHistory.length - 1] : null,\n    hintMove: showHint ? hintMove : null,\n    theme: themes[currentTheme],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GameInfo, {\n    playerTurn: playerTurn,\n    gameStatus: gameStatus,\n    moveHistory: moveHistory,\n    onResetGame: resetGame,\n    isInCheck: checkIndicator !== null,\n    aiDifficulty: aiDifficulty,\n    onGetHint: getHint,\n    aiThinking: aiThinking,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 9\n    }\n  })), promotionDialog && /*#__PURE__*/React.createElement(PromotionDialog, {\n    position: promotionDialog.position,\n    color: \"white\",\n    onSelect: handlePromotion,\n    onCancel: () => setPromotionDialog(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 11\n    }\n  }, \"Chess AI with Minimax Algorithm & Alpha-Beta Pruning\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 11\n    }\n  }, \"\\xA9 \", new Date().getFullYear(), \" AI Chess by Aditya Thakkar\"))));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","ChessBoard","GameInfo","PromotionDialog","ThemeSelector","themes","initializeBoard","isValidMove","makeMove","isInCheck","isCheckmate","isStalemate","isPawnPromotion","findBestMove","getAIMove","App","board","setBoard","selectedPiece","setSelectedPiece","playerTurn","setPlayerTurn","gameStatus","setGameStatus","moveHistory","setMoveHistory","gameState","setGameState","enPassantTarget","castlingRights","white","kingSide","queenSide","black","highlightedSquares","setHighlightedSquares","checkIndicator","setCheckIndicator","aiDifficulty","setAiDifficulty","showHint","setShowHint","hintMove","setHintMove","promotionDialog","setPromotionDialog","currentTheme","setCurrentTheme","aiThinking","setAiThinking","handleMoveRef","handleMove","fromRow","fromCol","toRow","toCol","promotionPiece","newBoard","newGameState","capturedPiece","piece","notation","generateMoveNotation","newMove","from","row","col","to","color","current","makeAIMove","setTimeout","aiMovePromise","Promise","resolve","aiMove","timeoutPromise","timeoutMs","race","then","moves","push","length","randomMove","Math","floor","random","error","console","validMoves","getPieceSymbol","pieceType","files","ranks","fromSquare","toSquare","type","charAt","toUpperCase","handleSquareClick","boardRect","document","querySelector","getBoundingClientRect","squareSize","width","position","x","left","y","top","pieceSymbol","String","fromCharCode","captureSymbol","moveNotation","handlePromotion","promotionSymbol","promotion","resetGame","handleDifficultyChange","difficulty","getHint","suggestedMove","handleThemeChange","themeKey","localStorage","setItem","savedTheme","getItem","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onThemeChange","onSquareClick","lastMove","theme","onResetGame","onGetHint","onSelect","onCancel","Date","getFullYear"],"sources":["/Users/aditya.thakkar/Documents/AI Chess/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport PromotionDialog from './components/PromotionDialog';\nimport ThemeSelector from './components/ThemeSelector';\nimport themes from './themes';\nimport { \n  initializeBoard, \n  isValidMove, \n  makeMove, \n  isInCheck, \n  isCheckmate, \n  isStalemate,\n  isPawnPromotion\n} from './utils/chessLogic';\nimport { findBestMove, getAIMove } from './utils/aiPlayer';\n\n// eslint-disable-next-line no-unused-vars\nfunction App() {\n  const [board, setBoard] = useState(initializeBoard());\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [playerTurn, setPlayerTurn] = useState('white');\n  const [gameStatus, setGameStatus] = useState('ongoing');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameState, setGameState] = useState({\n    enPassantTarget: null,\n    castlingRights: {\n      white: { kingSide: true, queenSide: true },\n      black: { kingSide: true, queenSide: true }\n    }\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState([]);\n  const [checkIndicator, setCheckIndicator] = useState(null);\n  const [aiDifficulty, setAiDifficulty] = useState('medium'); // 'easy', 'medium', 'hard'\n  const [showHint, setShowHint] = useState(false);\n  const [hintMove, setHintMove] = useState(null);\n  const [promotionDialog, setPromotionDialog] = useState(null);\n  const [currentTheme, setCurrentTheme] = useState('classic');\n  const [aiThinking, setAiThinking] = useState(false);\n\n  // Create a ref to store the handleMove function\n  const handleMoveRef = useRef(null);\n\n  // Handle move\n  const handleMove = useCallback((fromRow, fromCol, toRow, toCol, promotionPiece = null) => {\n    // eslint-disable-next-line no-unused-vars\n    const { board: newBoard, gameState: newGameState, capturedPiece } = makeMove(\n      board, \n      fromRow, \n      fromCol, \n      toRow, \n      toCol, \n      gameState,\n      promotionPiece\n    );\n    \n    setBoard(newBoard);\n    setGameState(newGameState);\n    \n    // Add move to history\n    const piece = board[fromRow][fromCol];\n    const notation = generateMoveNotation(piece, fromRow, fromCol, toRow, toCol, capturedPiece, promotionPiece);\n    \n    const newMove = {\n      from: { row: fromRow, col: fromCol },\n      to: { row: toRow, col: toCol },\n      piece,\n      capturedPiece,\n      notation,\n      color: piece.color\n    };\n    \n    setMoveHistory([...moveHistory, newMove]);\n    \n    // Switch turns\n    setPlayerTurn(playerTurn === 'white' ? 'black' : 'white');\n    \n    // Clear selection and highlights\n    setSelectedPiece(null);\n    setHighlightedSquares([]);\n    setShowHint(false);\n    setHintMove(null);\n  }, [board, gameState, moveHistory, playerTurn]);\n\n  // Update the ref whenever handleMove changes\n  useEffect(() => {\n    handleMoveRef.current = handleMove;\n  }, [handleMove]);\n\n  // Make AI move\n  const makeAIMove = useCallback(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing') {\n      setAiThinking(true);\n      \n      // Use setTimeout to allow the UI to update before starting the AI calculation\n      setTimeout(() => {\n        try {\n          // Set a timeout to ensure the AI doesn't take too long\n          const aiMovePromise = new Promise((resolve) => {\n            const aiMove = getAIMove(board, 'black', gameState, aiDifficulty);\n            resolve(aiMove);\n          });\n          \n          // Add a timeout to ensure we don't wait too long\n          const timeoutPromise = new Promise((resolve) => {\n            const timeoutMs = aiDifficulty === 'easy' ? 500 : (aiDifficulty === 'medium' ? 1000 : 1500);\n            setTimeout(() => resolve(null), timeoutMs);\n          });\n          \n          // Race between the AI calculation and the timeout\n          Promise.race([aiMovePromise, timeoutPromise])\n            .then(aiMove => {\n              if (aiMove) {\n                const { fromRow, fromCol, toRow, toCol } = aiMove;\n                const piece = board[fromRow][fromCol];\n                \n                // Check if this is a pawn promotion\n                if (isPawnPromotion(piece, toRow)) {\n                  // AI always promotes to queen\n                  handleMoveRef.current(fromRow, fromCol, toRow, toCol, 'queen');\n                } else {\n                  handleMoveRef.current(fromRow, fromCol, toRow, toCol);\n                }\n              } else {\n                // If timeout occurred, make a simple move\n                const moves = [];\n                for (let fromRow = 0; fromRow < 8; fromRow++) {\n                  for (let fromCol = 0; fromCol < 8; fromCol++) {\n                    const piece = board[fromRow][fromCol];\n                    if (piece && piece.color === 'black') {\n                      for (let toRow = 0; toRow < 8; toRow++) {\n                        for (let toCol = 0; toCol < 8; toCol++) {\n                          if (isValidMove(board, fromRow, fromCol, toRow, toCol, gameState)) {\n                            moves.push({ fromRow, fromCol, toRow, toCol });\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                \n                if (moves.length > 0) {\n                  const randomMove = moves[Math.floor(Math.random() * moves.length)];\n                  const { fromRow, fromCol, toRow, toCol } = randomMove;\n                  handleMoveRef.current(fromRow, fromCol, toRow, toCol);\n                }\n              }\n              \n              setAiThinking(false);\n            });\n        } catch (error) {\n          console.error(\"Error in AI move calculation:\", error);\n          setAiThinking(false);\n        }\n      }, 100);\n    }\n  }, [board, playerTurn, gameStatus, gameState, aiDifficulty]);\n\n  // Check for check, checkmate, or stalemate after each move\n  useEffect(() => {\n    if (moveHistory.length > 0) {\n      // Check if any king is in check\n      if (isInCheck(board, 'white')) {\n        setCheckIndicator('white');\n        \n        // Check if it's checkmate\n        if (isCheckmate(board, 'white')) {\n          setGameStatus('Checkmate! Black wins.');\n        }\n      } else if (isInCheck(board, 'black')) {\n        setCheckIndicator('black');\n        \n        // Check if it's checkmate\n        if (isCheckmate(board, 'black')) {\n          setGameStatus('Checkmate! White wins.');\n        }\n      } else {\n        setCheckIndicator(null);\n      }\n      \n      // Check for stalemate\n      if (playerTurn === 'white' && isStalemate(board, 'white')) {\n        setGameStatus('Draw by stalemate');\n      } else if (playerTurn === 'black' && isStalemate(board, 'black')) {\n        setGameStatus('Draw by stalemate');\n      }\n    }\n  }, [board, playerTurn, moveHistory]);\n\n  // AI makes a move when it's black's turn\n  useEffect(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing') {\n      makeAIMove();\n    }\n  }, [playerTurn, gameStatus, makeAIMove]);\n\n  // Calculate valid moves for the selected piece\n  useEffect(() => {\n    if (selectedPiece) {\n      const validMoves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n            validMoves.push({ row, col });\n          }\n        }\n      }\n      setHighlightedSquares(validMoves);\n    } else {\n      setHighlightedSquares([]);\n    }\n  }, [selectedPiece, board, gameState]);\n\n  const getPieceSymbol = (pieceType) => {\n    switch (pieceType) {\n      case 'pawn': return '';\n      case 'knight': return 'N';\n      case 'bishop': return 'B';\n      case 'rook': return 'R';\n      case 'queen': return 'Q';\n      case 'king': return 'K';\n      default: return '';\n    }\n  };\n\n  // Generate algebraic notation for a move\n  const generateMoveNotation = (piece, fromRow, fromCol, toRow, toCol, capturedPiece, promotionPiece) => {\n    const files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    const ranks = ['8', '7', '6', '5', '4', '3', '2', '1'];\n    \n    const fromSquare = files[fromCol] + ranks[fromRow];\n    const toSquare = files[toCol] + ranks[toRow];\n    \n    let notation = '';\n    \n    // Add piece symbol (except for pawns)\n    if (piece.type !== 'pawn') {\n      notation += piece.type.charAt(0).toUpperCase();\n    }\n    \n    // Add capture symbol if applicable\n    if (capturedPiece) {\n      if (piece.type === 'pawn') {\n        notation += fromSquare.charAt(0);\n      }\n      notation += 'x';\n    }\n    \n    // Add destination square\n    notation += toSquare;\n    \n    // Add promotion piece if applicable\n    if (promotionPiece) {\n      notation += '=' + promotionPiece.charAt(0).toUpperCase();\n    }\n    \n    return notation;\n  };\n\n  const handleSquareClick = (row, col) => {\n    // If game is over or promotion dialog is open, don't allow any moves\n    if (gameStatus !== 'ongoing' || promotionDialog) return;\n    \n    // If it's not the player's turn, don't allow any moves\n    if (playerTurn !== 'white') return;\n    \n    const piece = board[row][col];\n    \n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setSelectedPiece(null);\n        return;\n      }\n      \n      // If clicking on a different piece of the same color, select that piece instead\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({ row, col, piece });\n        return;\n      }\n      \n      // Try to make a move\n      if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n        // Check if this is a pawn promotion\n        if (isPawnPromotion(selectedPiece.piece, row)) {\n          // Show promotion dialog\n          const boardRect = document.querySelector('.chess-board').getBoundingClientRect();\n          const squareSize = boardRect.width / 8;\n          \n          setPromotionDialog({\n            fromRow: selectedPiece.row,\n            fromCol: selectedPiece.col,\n            toRow: row,\n            toCol: col,\n            position: {\n              x: boardRect.left + col * squareSize + squareSize / 2,\n              y: boardRect.top + row * squareSize + squareSize / 2\n            }\n          });\n          return;\n        }\n        \n        // Regular move\n        const { board: newBoard, gameState: newGameState } = makeMove(\n          board, \n          selectedPiece.row, \n          selectedPiece.col, \n          row, \n          col, \n          gameState\n        );\n        \n        // Create move notation\n        const pieceSymbol = getPieceSymbol(selectedPiece.piece.type);\n        const fromSquare = `${String.fromCharCode(97 + selectedPiece.col)}${8 - selectedPiece.row}`;\n        const toSquare = `${String.fromCharCode(97 + col)}${8 - row}`;\n        const captureSymbol = board[row][col] ? 'x' : '';\n        \n        let moveNotation = `${pieceSymbol}${fromSquare}${captureSymbol}${toSquare}`;\n        \n        // Check if the move results in check or checkmate\n        if (isCheckmate(newBoard, 'black')) {\n          moveNotation += '#';\n        } else if (isInCheck(newBoard, 'black')) {\n          moveNotation += '+';\n        }\n        \n        // Update the game state\n        setBoard(newBoard);\n        setGameState(newGameState);\n        setMoveHistory([...moveHistory, { \n          notation: moveNotation, \n          color: 'white',\n          from: { row: selectedPiece.row, col: selectedPiece.col },\n          to: { row, col },\n          capturedPiece: board[row][col]\n        }]);\n        setSelectedPiece(null);\n        setPlayerTurn('black');\n        setShowHint(false);\n        setHintMove(null);\n      }\n    } else {\n      // If no piece is selected and clicked on a piece of the player's color, select it\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({ row, col, piece });\n      }\n    }\n  };\n\n  const handlePromotion = (pieceType) => {\n    if (!promotionDialog) return;\n    \n    const { fromRow, fromCol, toRow, toCol } = promotionDialog;\n    \n    // Make the move with promotion\n    const { board: newBoard, gameState: newGameState } = makeMove(\n      board, \n      fromRow, \n      fromCol, \n      toRow, \n      toCol, \n      gameState,\n      pieceType\n    );\n    \n    // Create move notation\n    const fromSquare = `${String.fromCharCode(97 + fromCol)}${8 - fromRow}`;\n    const toSquare = `${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n    const captureSymbol = board[toRow][toCol] ? 'x' : '';\n    const promotionSymbol = pieceType === 'knight' ? 'N' : pieceType.charAt(0).toUpperCase();\n    \n    let moveNotation = `${fromSquare}${captureSymbol}${toSquare}=${promotionSymbol}`;\n    \n    // Check if the move results in check or checkmate\n    if (isCheckmate(newBoard, 'black')) {\n      moveNotation += '#';\n    } else if (isInCheck(newBoard, 'black')) {\n      moveNotation += '+';\n    }\n    \n    // Update the game state\n    setBoard(newBoard);\n    setGameState(newGameState);\n    setMoveHistory([...moveHistory, { \n      notation: moveNotation, \n      color: 'white',\n      from: { row: fromRow, col: fromCol },\n      to: { row: toRow, col: toCol },\n      capturedPiece: board[toRow][toCol],\n      promotion: pieceType\n    }]);\n    setSelectedPiece(null);\n    setPlayerTurn('black');\n    setPromotionDialog(null);\n    setShowHint(false);\n    setHintMove(null);\n  };\n\n  const resetGame = () => {\n    setBoard(initializeBoard());\n    setSelectedPiece(null);\n    setPlayerTurn('white');\n    setGameStatus('ongoing');\n    setMoveHistory([]);\n    setGameState({\n      enPassantTarget: null,\n      castlingRights: {\n        white: { kingSide: true, queenSide: true },\n        black: { kingSide: true, queenSide: true }\n      }\n    });\n    setHighlightedSquares([]);\n    setCheckIndicator(null);\n    setShowHint(false);\n    setHintMove(null);\n    setPromotionDialog(null);\n  };\n\n  const handleDifficultyChange = (difficulty) => {\n    setAiDifficulty(difficulty);\n    resetGame();\n  };\n\n  const getHint = () => {\n    // Use the AI to suggest a move for the player\n    if (playerTurn === 'white' && gameStatus === 'ongoing') {\n      const suggestedMove = getAIMove(board, 'white', gameState, 2);\n      if (suggestedMove) {\n        setShowHint(true);\n        setHintMove(suggestedMove);\n      }\n    }\n  };\n\n  // Handle theme change\n  const handleThemeChange = (themeKey) => {\n    setCurrentTheme(themeKey);\n    // Save theme preference to localStorage\n    localStorage.setItem('chessTheme', themeKey);\n  };\n\n  // Load saved theme from localStorage on initial render\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('chessTheme');\n    if (savedTheme && themes[savedTheme]) {\n      setCurrentTheme(savedTheme);\n    }\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-header\">\n        <h1>AI Chess</h1>\n        <div className=\"author-credits\">\n          <span>Created by Aditya Thakkar</span>\n        </div>\n      </div>\n      <div className=\"difficulty-selector\">\n        <span className=\"difficulty-label\">AI Difficulty:</span>\n        <div className=\"difficulty-buttons\">\n          <button \n            className={`difficulty-button ${aiDifficulty === 'easy' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('easy')}\n          >\n            Easy\n          </button>\n          <button \n            className={`difficulty-button ${aiDifficulty === 'medium' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('medium')}\n          >\n            Medium\n          </button>\n          <button \n            className={`difficulty-button ${aiDifficulty === 'hard' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('hard')}\n          >\n            Hard\n          </button>\n        </div>\n      </div>\n      <ThemeSelector \n        currentTheme={currentTheme} \n        onThemeChange={handleThemeChange} \n      />\n      <div className=\"game-container\">\n        <ChessBoard \n          board={board} \n          selectedPiece={selectedPiece} \n          onSquareClick={handleSquareClick}\n          highlightedSquares={highlightedSquares}\n          checkIndicator={checkIndicator}\n          lastMove={moveHistory.length > 0 ? moveHistory[moveHistory.length - 1] : null}\n          hintMove={showHint ? hintMove : null}\n          theme={themes[currentTheme]}\n        />\n        <GameInfo \n          playerTurn={playerTurn} \n          gameStatus={gameStatus} \n          moveHistory={moveHistory} \n          onResetGame={resetGame} \n          isInCheck={checkIndicator !== null}\n          aiDifficulty={aiDifficulty}\n          onGetHint={getHint}\n          aiThinking={aiThinking}\n        />\n      </div>\n      {promotionDialog && (\n        <PromotionDialog \n          position={promotionDialog.position}\n          color=\"white\"\n          onSelect={handlePromotion}\n          onCancel={() => setPromotionDialog(null)}\n        />\n      )}\n      <div className=\"app-footer\">\n        <div className=\"footer-content\">\n          <p>Chess AI with Minimax Algorithm & Alpha-Beta Pruning</p>\n          <p>© {new Date().getFullYear()} AI Chess by Aditya Thakkar</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App; \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}