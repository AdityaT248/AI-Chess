{"ast":null,"code":"var _jsxFileName = \"/Users/aditya.thakkar/Documents/AI Chess/src/App.js\";\nimport React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport PromotionDialog from './components/PromotionDialog';\nimport ThemeSelector from './components/ThemeSelector';\nimport themes from './themes';\nimport { initializeBoard, isValidMove, makeMove, isInCheck, isCheckmate, isStalemate, isPawnPromotion } from './utils/chessLogic';\nimport { findBestMove, getAIMove } from './utils/aiPlayer';\n\n// eslint-disable-next-line no-unused-vars\nfunction App() {\n  const [board, setBoard] = useState(initializeBoard());\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [playerTurn, setPlayerTurn] = useState('white');\n  const [gameStatus, setGameStatus] = useState('ongoing');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameState, setGameState] = useState({\n    enPassantTarget: null,\n    castlingRights: {\n      white: {\n        kingSide: true,\n        queenSide: true\n      },\n      black: {\n        kingSide: true,\n        queenSide: true\n      }\n    }\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState([]);\n  const [checkIndicator, setCheckIndicator] = useState(null);\n  const [aiDifficulty, setAiDifficulty] = useState('medium'); // 'easy', 'medium', 'hard'\n  const [showHint, setShowHint] = useState(false);\n  const [hintMove, setHintMove] = useState(null);\n  const [promotionDialog, setPromotionDialog] = useState(null);\n  const [currentTheme, setCurrentTheme] = useState('classic');\n  const [aiThinking, setAiThinking] = useState(false);\n\n  // Create a ref to store the handleMove function\n  const handleMoveRef = useRef(null);\n\n  // Handle move\n  const handleMove = useCallback((fromRow, fromCol, toRow, toCol, promotionPiece = null) => {\n    // eslint-disable-next-line no-unused-vars\n    const {\n      board: newBoard,\n      gameState: newGameState,\n      capturedPiece\n    } = makeMove(board, fromRow, fromCol, toRow, toCol, gameState, promotionPiece);\n    setBoard(newBoard);\n    setGameState(newGameState);\n\n    // Add move to history\n    const piece = board[fromRow][fromCol];\n    const notation = generateMoveNotation(piece, fromRow, fromCol, toRow, toCol, capturedPiece, promotionPiece);\n    const newMove = {\n      from: {\n        row: fromRow,\n        col: fromCol\n      },\n      to: {\n        row: toRow,\n        col: toCol\n      },\n      piece,\n      capturedPiece,\n      notation,\n      color: piece.color\n    };\n    setMoveHistory(prevHistory => [...prevHistory, newMove]);\n\n    // Switch turns\n    setPlayerTurn(prevTurn => prevTurn === 'white' ? 'black' : 'white');\n\n    // Clear selection and highlights\n    setSelectedPiece(null);\n    setHighlightedSquares([]);\n    setShowHint(false);\n    setHintMove(null);\n  }, [board, gameState]);\n\n  // Update the ref whenever handleMove changes\n  useEffect(() => {\n    handleMoveRef.current = handleMove;\n  }, [handleMove]);\n\n  // Make AI move - optimized version\n  const makeAIMove = useCallback(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing') {\n      setAiThinking(true);\n\n      // Use requestAnimationFrame to ensure UI updates before AI calculation\n      requestAnimationFrame(() => {\n        try {\n          // Get AI move directly - the new algorithm is fast enough\n          const aiMove = getAIMove(board, 'black', gameState, aiDifficulty);\n          if (aiMove) {\n            const {\n              fromRow,\n              fromCol,\n              toRow,\n              toCol\n            } = aiMove;\n            const piece = board[fromRow][fromCol];\n\n            // Check if this is a pawn promotion\n            if (isPawnPromotion(piece, toRow)) {\n              // AI always promotes to queen\n              handleMoveRef.current(fromRow, fromCol, toRow, toCol, 'queen');\n            } else {\n              handleMoveRef.current(fromRow, fromCol, toRow, toCol);\n            }\n          } else {\n            // If no move found, try a random move\n            const moves = [];\n            for (let fromRow = 0; fromRow < 8; fromRow++) {\n              for (let fromCol = 0; fromCol < 8; fromCol++) {\n                const piece = board[fromRow][fromCol];\n                if (piece && piece.color === 'black') {\n                  for (let toRow = 0; toRow < 8; toRow++) {\n                    for (let toCol = 0; toCol < 8; toCol++) {\n                      if (isValidMove(board, fromRow, fromCol, toRow, toCol, gameState)) {\n                        moves.push({\n                          fromRow,\n                          fromCol,\n                          toRow,\n                          toCol\n                        });\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            if (moves.length > 0) {\n              const randomMove = moves[Math.floor(Math.random() * moves.length)];\n              const {\n                fromRow,\n                fromCol,\n                toRow,\n                toCol\n              } = randomMove;\n              handleMoveRef.current(fromRow, fromCol, toRow, toCol);\n            }\n          }\n\n          // Add a small delay to make the AI move visible to the user\n          setTimeout(() => {\n            setAiThinking(false);\n          }, 200);\n        } catch (error) {\n          console.error(\"Error in AI move calculation:\", error);\n          setAiThinking(false);\n        }\n      });\n    }\n  }, [board, playerTurn, gameStatus, gameState, aiDifficulty]);\n\n  // Check for check, checkmate, or stalemate after each move\n  useEffect(() => {\n    if (moveHistory.length > 0) {\n      // Check if any king is in check\n      if (isInCheck(board, 'white')) {\n        setCheckIndicator('white');\n\n        // Check if it's checkmate\n        if (isCheckmate(board, 'white')) {\n          setGameStatus('Checkmate! Black wins.');\n        }\n      } else if (isInCheck(board, 'black')) {\n        setCheckIndicator('black');\n\n        // Check if it's checkmate\n        if (isCheckmate(board, 'black')) {\n          setGameStatus('Checkmate! White wins.');\n        }\n      } else {\n        setCheckIndicator(null);\n      }\n\n      // Check for stalemate\n      if (playerTurn === 'white' && isStalemate(board, 'white')) {\n        setGameStatus('Draw by stalemate');\n      } else if (playerTurn === 'black' && isStalemate(board, 'black')) {\n        setGameStatus('Draw by stalemate');\n      }\n    }\n  }, [board, playerTurn, moveHistory]);\n\n  // AI makes a move when it's black's turn\n  useEffect(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing') {\n      makeAIMove();\n    }\n  }, [playerTurn, gameStatus, makeAIMove]);\n\n  // Calculate valid moves for the selected piece - memoized\n  const validMoves = useMemo(() => {\n    if (!selectedPiece) return [];\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n          moves.push({\n            row,\n            col\n          });\n        }\n      }\n    }\n    return moves;\n  }, [selectedPiece, board, gameState]);\n\n  // Update highlighted squares when valid moves change\n  useEffect(() => {\n    setHighlightedSquares(validMoves);\n  }, [validMoves]);\n  const getPieceSymbol = useCallback(pieceType => {\n    switch (pieceType) {\n      case 'pawn':\n        return '';\n      case 'knight':\n        return 'N';\n      case 'bishop':\n        return 'B';\n      case 'rook':\n        return 'R';\n      case 'queen':\n        return 'Q';\n      case 'king':\n        return 'K';\n      default:\n        return '';\n    }\n  }, []);\n\n  // Generate algebraic notation for a move\n  const generateMoveNotation = useCallback((piece, fromRow, fromCol, toRow, toCol, capturedPiece, promotionPiece) => {\n    const files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    const ranks = ['8', '7', '6', '5', '4', '3', '2', '1'];\n    const fromSquare = files[fromCol] + ranks[fromRow];\n    const toSquare = files[toCol] + ranks[toRow];\n    let notation = '';\n\n    // Add piece symbol (except for pawns)\n    if (piece.type !== 'pawn') {\n      notation += piece.type.charAt(0).toUpperCase();\n    }\n\n    // Add capture symbol if applicable\n    if (capturedPiece) {\n      if (piece.type === 'pawn') {\n        notation += fromSquare.charAt(0);\n      }\n      notation += 'x';\n    }\n\n    // Add destination square\n    notation += toSquare;\n\n    // Add promotion piece if applicable\n    if (promotionPiece) {\n      notation += '=' + promotionPiece.charAt(0).toUpperCase();\n    }\n    return notation;\n  }, []);\n  const handleSquareClick = useCallback((row, col) => {\n    // If game is over or promotion dialog is open, don't allow any moves\n    if (gameStatus !== 'ongoing' || promotionDialog) return;\n\n    // If it's not the player's turn, don't allow any moves\n    if (playerTurn !== 'white') return;\n    const piece = board[row][col];\n\n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setSelectedPiece(null);\n        return;\n      }\n\n      // If clicking on a different piece of the same color, select that piece instead\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({\n          row,\n          col,\n          piece\n        });\n        return;\n      }\n\n      // Try to make a move\n      if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n        // Check if this is a pawn promotion\n        if (isPawnPromotion(selectedPiece.piece, row)) {\n          // Show promotion dialog\n          const boardRect = document.querySelector('.chess-board').getBoundingClientRect();\n          const squareSize = boardRect.width / 8;\n          setPromotionDialog({\n            fromRow: selectedPiece.row,\n            fromCol: selectedPiece.col,\n            toRow: row,\n            toCol: col,\n            position: {\n              x: boardRect.left + col * squareSize + squareSize / 2,\n              y: boardRect.top + row * squareSize + squareSize / 2\n            }\n          });\n          return;\n        }\n\n        // Regular move\n        handleMove(selectedPiece.row, selectedPiece.col, row, col);\n      }\n    } else {\n      // If no piece is selected and clicked on a piece of the player's color, select it\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({\n          row,\n          col,\n          piece\n        });\n      }\n    }\n  }, [board, gameState, gameStatus, handleMove, playerTurn, promotionDialog, selectedPiece]);\n  const handlePromotion = useCallback(pieceType => {\n    if (!promotionDialog) return;\n    const {\n      fromRow,\n      fromCol,\n      toRow,\n      toCol\n    } = promotionDialog;\n\n    // Make the move with promotion\n    handleMove(fromRow, fromCol, toRow, toCol, pieceType);\n    setPromotionDialog(null);\n  }, [handleMove, promotionDialog]);\n  const resetGame = useCallback(() => {\n    setBoard(initializeBoard());\n    setSelectedPiece(null);\n    setPlayerTurn('white');\n    setGameStatus('ongoing');\n    setMoveHistory([]);\n    setGameState({\n      enPassantTarget: null,\n      castlingRights: {\n        white: {\n          kingSide: true,\n          queenSide: true\n        },\n        black: {\n          kingSide: true,\n          queenSide: true\n        }\n      }\n    });\n    setHighlightedSquares([]);\n    setCheckIndicator(null);\n    setShowHint(false);\n    setHintMove(null);\n    setPromotionDialog(null);\n  }, []);\n  const handleDifficultyChange = useCallback(difficulty => {\n    setAiDifficulty(difficulty);\n    resetGame();\n  }, [resetGame]);\n  const getHint = useCallback(() => {\n    // Use the AI to suggest a move for the player\n    if (playerTurn === 'white' && gameStatus === 'ongoing') {\n      const suggestedMove = getAIMove(board, 'white', gameState, 2);\n      if (suggestedMove) {\n        setShowHint(true);\n        setHintMove(suggestedMove);\n      }\n    }\n  }, [board, gameState, gameStatus, playerTurn]);\n\n  // Handle theme change\n  const handleThemeChange = useCallback(themeKey => {\n    setCurrentTheme(themeKey);\n    // Save theme preference to localStorage\n    localStorage.setItem('chessTheme', themeKey);\n  }, []);\n\n  // Load saved theme from localStorage on initial render\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('chessTheme');\n    if (savedTheme && themes[savedTheme]) {\n      setCurrentTheme(savedTheme);\n    }\n  }, []);\n\n  // Memoize the last move for better performance\n  const lastMove = useMemo(() => {\n    return moveHistory.length > 0 ? moveHistory[moveHistory.length - 1] : null;\n  }, [moveHistory]);\n\n  // Memoize the current theme object\n  const currentThemeObject = useMemo(() => themes[currentTheme], [currentTheme]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 9\n    }\n  }, \"AI Chess\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"author-credits\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 11\n    }\n  }, \"Created by Aditya Thakkar\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"difficulty-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 9\n    }\n  }, \"AI Difficulty:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'easy' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('easy'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 11\n    }\n  }, \"Easy\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'medium' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('medium'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 11\n    }\n  }, \"Medium\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'hard' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('hard'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 11\n    }\n  }, \"Hard\"))), /*#__PURE__*/React.createElement(ThemeSelector, {\n    currentTheme: currentTheme,\n    onThemeChange: handleThemeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ChessBoard, {\n    board: board,\n    selectedPiece: selectedPiece,\n    onSquareClick: handleSquareClick,\n    highlightedSquares: highlightedSquares,\n    checkIndicator: checkIndicator,\n    lastMove: lastMove,\n    hintMove: showHint ? hintMove : null,\n    theme: currentThemeObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GameInfo, {\n    playerTurn: playerTurn,\n    gameStatus: gameStatus,\n    moveHistory: moveHistory,\n    onResetGame: resetGame,\n    isInCheck: checkIndicator !== null,\n    aiDifficulty: aiDifficulty,\n    onGetHint: getHint,\n    aiThinking: aiThinking,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 9\n    }\n  })), promotionDialog && /*#__PURE__*/React.createElement(PromotionDialog, {\n    position: promotionDialog.position,\n    color: \"white\",\n    onSelect: handlePromotion,\n    onCancel: () => setPromotionDialog(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 11\n    }\n  }, \"Chess AI with Minimax Algorithm & Alpha-Beta Pruning\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 11\n    }\n  }, \"\\xA9 \", new Date().getFullYear(), \" AI Chess by Aditya Thakkar\"))));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useMemo","ChessBoard","GameInfo","PromotionDialog","ThemeSelector","themes","initializeBoard","isValidMove","makeMove","isInCheck","isCheckmate","isStalemate","isPawnPromotion","findBestMove","getAIMove","App","board","setBoard","selectedPiece","setSelectedPiece","playerTurn","setPlayerTurn","gameStatus","setGameStatus","moveHistory","setMoveHistory","gameState","setGameState","enPassantTarget","castlingRights","white","kingSide","queenSide","black","highlightedSquares","setHighlightedSquares","checkIndicator","setCheckIndicator","aiDifficulty","setAiDifficulty","showHint","setShowHint","hintMove","setHintMove","promotionDialog","setPromotionDialog","currentTheme","setCurrentTheme","aiThinking","setAiThinking","handleMoveRef","handleMove","fromRow","fromCol","toRow","toCol","promotionPiece","newBoard","newGameState","capturedPiece","piece","notation","generateMoveNotation","newMove","from","row","col","to","color","prevHistory","prevTurn","current","makeAIMove","requestAnimationFrame","aiMove","moves","push","length","randomMove","Math","floor","random","setTimeout","error","console","validMoves","getPieceSymbol","pieceType","files","ranks","fromSquare","toSquare","type","charAt","toUpperCase","handleSquareClick","boardRect","document","querySelector","getBoundingClientRect","squareSize","width","position","x","left","y","top","handlePromotion","resetGame","handleDifficultyChange","difficulty","getHint","suggestedMove","handleThemeChange","themeKey","localStorage","setItem","savedTheme","getItem","lastMove","currentThemeObject","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onThemeChange","onSquareClick","theme","onResetGame","onGetHint","onSelect","onCancel","Date","getFullYear"],"sources":["/Users/aditya.thakkar/Documents/AI Chess/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport PromotionDialog from './components/PromotionDialog';\nimport ThemeSelector from './components/ThemeSelector';\nimport themes from './themes';\nimport { \n  initializeBoard, \n  isValidMove, \n  makeMove, \n  isInCheck, \n  isCheckmate, \n  isStalemate,\n  isPawnPromotion\n} from './utils/chessLogic';\nimport { findBestMove, getAIMove } from './utils/aiPlayer';\n\n// eslint-disable-next-line no-unused-vars\nfunction App() {\n  const [board, setBoard] = useState(initializeBoard());\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [playerTurn, setPlayerTurn] = useState('white');\n  const [gameStatus, setGameStatus] = useState('ongoing');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameState, setGameState] = useState({\n    enPassantTarget: null,\n    castlingRights: {\n      white: { kingSide: true, queenSide: true },\n      black: { kingSide: true, queenSide: true }\n    }\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState([]);\n  const [checkIndicator, setCheckIndicator] = useState(null);\n  const [aiDifficulty, setAiDifficulty] = useState('medium'); // 'easy', 'medium', 'hard'\n  const [showHint, setShowHint] = useState(false);\n  const [hintMove, setHintMove] = useState(null);\n  const [promotionDialog, setPromotionDialog] = useState(null);\n  const [currentTheme, setCurrentTheme] = useState('classic');\n  const [aiThinking, setAiThinking] = useState(false);\n\n  // Create a ref to store the handleMove function\n  const handleMoveRef = useRef(null);\n\n  // Handle move\n  const handleMove = useCallback((fromRow, fromCol, toRow, toCol, promotionPiece = null) => {\n    // eslint-disable-next-line no-unused-vars\n    const { board: newBoard, gameState: newGameState, capturedPiece } = makeMove(\n      board, \n      fromRow, \n      fromCol, \n      toRow, \n      toCol, \n      gameState,\n      promotionPiece\n    );\n    \n    setBoard(newBoard);\n    setGameState(newGameState);\n    \n    // Add move to history\n    const piece = board[fromRow][fromCol];\n    const notation = generateMoveNotation(piece, fromRow, fromCol, toRow, toCol, capturedPiece, promotionPiece);\n    \n    const newMove = {\n      from: { row: fromRow, col: fromCol },\n      to: { row: toRow, col: toCol },\n      piece,\n      capturedPiece,\n      notation,\n      color: piece.color\n    };\n    \n    setMoveHistory(prevHistory => [...prevHistory, newMove]);\n    \n    // Switch turns\n    setPlayerTurn(prevTurn => prevTurn === 'white' ? 'black' : 'white');\n    \n    // Clear selection and highlights\n    setSelectedPiece(null);\n    setHighlightedSquares([]);\n    setShowHint(false);\n    setHintMove(null);\n  }, [board, gameState]);\n\n  // Update the ref whenever handleMove changes\n  useEffect(() => {\n    handleMoveRef.current = handleMove;\n  }, [handleMove]);\n\n  // Make AI move - optimized version\n  const makeAIMove = useCallback(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing') {\n      setAiThinking(true);\n      \n      // Use requestAnimationFrame to ensure UI updates before AI calculation\n      requestAnimationFrame(() => {\n        try {\n          // Get AI move directly - the new algorithm is fast enough\n          const aiMove = getAIMove(board, 'black', gameState, aiDifficulty);\n          \n          if (aiMove) {\n            const { fromRow, fromCol, toRow, toCol } = aiMove;\n            const piece = board[fromRow][fromCol];\n            \n            // Check if this is a pawn promotion\n            if (isPawnPromotion(piece, toRow)) {\n              // AI always promotes to queen\n              handleMoveRef.current(fromRow, fromCol, toRow, toCol, 'queen');\n            } else {\n              handleMoveRef.current(fromRow, fromCol, toRow, toCol);\n            }\n          } else {\n            // If no move found, try a random move\n            const moves = [];\n            for (let fromRow = 0; fromRow < 8; fromRow++) {\n              for (let fromCol = 0; fromCol < 8; fromCol++) {\n                const piece = board[fromRow][fromCol];\n                if (piece && piece.color === 'black') {\n                  for (let toRow = 0; toRow < 8; toRow++) {\n                    for (let toCol = 0; toCol < 8; toCol++) {\n                      if (isValidMove(board, fromRow, fromCol, toRow, toCol, gameState)) {\n                        moves.push({ fromRow, fromCol, toRow, toCol });\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            \n            if (moves.length > 0) {\n              const randomMove = moves[Math.floor(Math.random() * moves.length)];\n              const { fromRow, fromCol, toRow, toCol } = randomMove;\n              handleMoveRef.current(fromRow, fromCol, toRow, toCol);\n            }\n          }\n          \n          // Add a small delay to make the AI move visible to the user\n          setTimeout(() => {\n            setAiThinking(false);\n          }, 200);\n        } catch (error) {\n          console.error(\"Error in AI move calculation:\", error);\n          setAiThinking(false);\n        }\n      });\n    }\n  }, [board, playerTurn, gameStatus, gameState, aiDifficulty]);\n\n  // Check for check, checkmate, or stalemate after each move\n  useEffect(() => {\n    if (moveHistory.length > 0) {\n      // Check if any king is in check\n      if (isInCheck(board, 'white')) {\n        setCheckIndicator('white');\n        \n        // Check if it's checkmate\n        if (isCheckmate(board, 'white')) {\n          setGameStatus('Checkmate! Black wins.');\n        }\n      } else if (isInCheck(board, 'black')) {\n        setCheckIndicator('black');\n        \n        // Check if it's checkmate\n        if (isCheckmate(board, 'black')) {\n          setGameStatus('Checkmate! White wins.');\n        }\n      } else {\n        setCheckIndicator(null);\n      }\n      \n      // Check for stalemate\n      if (playerTurn === 'white' && isStalemate(board, 'white')) {\n        setGameStatus('Draw by stalemate');\n      } else if (playerTurn === 'black' && isStalemate(board, 'black')) {\n        setGameStatus('Draw by stalemate');\n      }\n    }\n  }, [board, playerTurn, moveHistory]);\n\n  // AI makes a move when it's black's turn\n  useEffect(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing') {\n      makeAIMove();\n    }\n  }, [playerTurn, gameStatus, makeAIMove]);\n\n  // Calculate valid moves for the selected piece - memoized\n  const validMoves = useMemo(() => {\n    if (!selectedPiece) return [];\n    \n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n          moves.push({ row, col });\n        }\n      }\n    }\n    return moves;\n  }, [selectedPiece, board, gameState]);\n\n  // Update highlighted squares when valid moves change\n  useEffect(() => {\n    setHighlightedSquares(validMoves);\n  }, [validMoves]);\n\n  const getPieceSymbol = useCallback((pieceType) => {\n    switch (pieceType) {\n      case 'pawn': return '';\n      case 'knight': return 'N';\n      case 'bishop': return 'B';\n      case 'rook': return 'R';\n      case 'queen': return 'Q';\n      case 'king': return 'K';\n      default: return '';\n    }\n  }, []);\n\n  // Generate algebraic notation for a move\n  const generateMoveNotation = useCallback((piece, fromRow, fromCol, toRow, toCol, capturedPiece, promotionPiece) => {\n    const files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    const ranks = ['8', '7', '6', '5', '4', '3', '2', '1'];\n    \n    const fromSquare = files[fromCol] + ranks[fromRow];\n    const toSquare = files[toCol] + ranks[toRow];\n    \n    let notation = '';\n    \n    // Add piece symbol (except for pawns)\n    if (piece.type !== 'pawn') {\n      notation += piece.type.charAt(0).toUpperCase();\n    }\n    \n    // Add capture symbol if applicable\n    if (capturedPiece) {\n      if (piece.type === 'pawn') {\n        notation += fromSquare.charAt(0);\n      }\n      notation += 'x';\n    }\n    \n    // Add destination square\n    notation += toSquare;\n    \n    // Add promotion piece if applicable\n    if (promotionPiece) {\n      notation += '=' + promotionPiece.charAt(0).toUpperCase();\n    }\n    \n    return notation;\n  }, []);\n\n  const handleSquareClick = useCallback((row, col) => {\n    // If game is over or promotion dialog is open, don't allow any moves\n    if (gameStatus !== 'ongoing' || promotionDialog) return;\n    \n    // If it's not the player's turn, don't allow any moves\n    if (playerTurn !== 'white') return;\n    \n    const piece = board[row][col];\n    \n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setSelectedPiece(null);\n        return;\n      }\n      \n      // If clicking on a different piece of the same color, select that piece instead\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({ row, col, piece });\n        return;\n      }\n      \n      // Try to make a move\n      if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n        // Check if this is a pawn promotion\n        if (isPawnPromotion(selectedPiece.piece, row)) {\n          // Show promotion dialog\n          const boardRect = document.querySelector('.chess-board').getBoundingClientRect();\n          const squareSize = boardRect.width / 8;\n          \n          setPromotionDialog({\n            fromRow: selectedPiece.row,\n            fromCol: selectedPiece.col,\n            toRow: row,\n            toCol: col,\n            position: {\n              x: boardRect.left + col * squareSize + squareSize / 2,\n              y: boardRect.top + row * squareSize + squareSize / 2\n            }\n          });\n          return;\n        }\n        \n        // Regular move\n        handleMove(selectedPiece.row, selectedPiece.col, row, col);\n      }\n    } else {\n      // If no piece is selected and clicked on a piece of the player's color, select it\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({ row, col, piece });\n      }\n    }\n  }, [board, gameState, gameStatus, handleMove, playerTurn, promotionDialog, selectedPiece]);\n\n  const handlePromotion = useCallback((pieceType) => {\n    if (!promotionDialog) return;\n    \n    const { fromRow, fromCol, toRow, toCol } = promotionDialog;\n    \n    // Make the move with promotion\n    handleMove(fromRow, fromCol, toRow, toCol, pieceType);\n    setPromotionDialog(null);\n  }, [handleMove, promotionDialog]);\n\n  const resetGame = useCallback(() => {\n    setBoard(initializeBoard());\n    setSelectedPiece(null);\n    setPlayerTurn('white');\n    setGameStatus('ongoing');\n    setMoveHistory([]);\n    setGameState({\n      enPassantTarget: null,\n      castlingRights: {\n        white: { kingSide: true, queenSide: true },\n        black: { kingSide: true, queenSide: true }\n      }\n    });\n    setHighlightedSquares([]);\n    setCheckIndicator(null);\n    setShowHint(false);\n    setHintMove(null);\n    setPromotionDialog(null);\n  }, []);\n\n  const handleDifficultyChange = useCallback((difficulty) => {\n    setAiDifficulty(difficulty);\n    resetGame();\n  }, [resetGame]);\n\n  const getHint = useCallback(() => {\n    // Use the AI to suggest a move for the player\n    if (playerTurn === 'white' && gameStatus === 'ongoing') {\n      const suggestedMove = getAIMove(board, 'white', gameState, 2);\n      if (suggestedMove) {\n        setShowHint(true);\n        setHintMove(suggestedMove);\n      }\n    }\n  }, [board, gameState, gameStatus, playerTurn]);\n\n  // Handle theme change\n  const handleThemeChange = useCallback((themeKey) => {\n    setCurrentTheme(themeKey);\n    // Save theme preference to localStorage\n    localStorage.setItem('chessTheme', themeKey);\n  }, []);\n\n  // Load saved theme from localStorage on initial render\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('chessTheme');\n    if (savedTheme && themes[savedTheme]) {\n      setCurrentTheme(savedTheme);\n    }\n  }, []);\n\n  // Memoize the last move for better performance\n  const lastMove = useMemo(() => {\n    return moveHistory.length > 0 ? moveHistory[moveHistory.length - 1] : null;\n  }, [moveHistory]);\n\n  // Memoize the current theme object\n  const currentThemeObject = useMemo(() => themes[currentTheme], [currentTheme]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-header\">\n        <h1>AI Chess</h1>\n        <div className=\"author-credits\">\n          <span>Created by Aditya Thakkar</span>\n        </div>\n      </div>\n      <div className=\"difficulty-selector\">\n        <span className=\"difficulty-label\">AI Difficulty:</span>\n        <div className=\"difficulty-buttons\">\n          <button \n            className={`difficulty-button ${aiDifficulty === 'easy' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('easy')}\n          >\n            Easy\n          </button>\n          <button \n            className={`difficulty-button ${aiDifficulty === 'medium' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('medium')}\n          >\n            Medium\n          </button>\n          <button \n            className={`difficulty-button ${aiDifficulty === 'hard' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('hard')}\n          >\n            Hard\n          </button>\n        </div>\n      </div>\n      <ThemeSelector \n        currentTheme={currentTheme} \n        onThemeChange={handleThemeChange} \n      />\n      <div className=\"game-container\">\n        <ChessBoard \n          board={board} \n          selectedPiece={selectedPiece} \n          onSquareClick={handleSquareClick}\n          highlightedSquares={highlightedSquares}\n          checkIndicator={checkIndicator}\n          lastMove={lastMove}\n          hintMove={showHint ? hintMove : null}\n          theme={currentThemeObject}\n        />\n        <GameInfo \n          playerTurn={playerTurn} \n          gameStatus={gameStatus} \n          moveHistory={moveHistory} \n          onResetGame={resetGame} \n          isInCheck={checkIndicator !== null}\n          aiDifficulty={aiDifficulty}\n          onGetHint={getHint}\n          aiThinking={aiThinking}\n        />\n      </div>\n      {promotionDialog && (\n        <PromotionDialog \n          position={promotionDialog.position}\n          color=\"white\"\n          onSelect={handlePromotion}\n          onCancel={() => setPromotionDialog(null)}\n        />\n      )}\n      <div className=\"app-footer\">\n        <div className=\"footer-content\">\n          <p>Chess AI with Minimax Algorithm & Alpha-Beta Pruning</p>\n          <p>© {new Date().getFullYear()} AI Chess by Aditya Thakkar</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App; \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}