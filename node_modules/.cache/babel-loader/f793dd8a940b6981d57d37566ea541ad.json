{"ast":null,"code":"var _jsxFileName = \"/Users/aditya.thakkar/Documents/AI Chess/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport { initializeBoard, isValidMove, makeMove, getAIMove } from './utils/chessLogic';\nfunction App() {\n  const [board, setBoard] = useState(initializeBoard());\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [playerTurn, setPlayerTurn] = useState('white');\n  const [gameStatus, setGameStatus] = useState('ongoing');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const handleSquareClick = (row, col) => {\n    // If game is over, don't allow any moves\n    if (gameStatus !== 'ongoing') return;\n\n    // If it's not the player's turn, don't allow any moves\n    if (playerTurn !== 'white') return;\n    const piece = board[row][col];\n\n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setSelectedPiece(null);\n        return;\n      }\n\n      // If clicking on a different piece of the same color, select that piece instead\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({\n          row,\n          col,\n          piece\n        });\n        return;\n      }\n\n      // Try to make a move\n      if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, moveHistory)) {\n        const newBoard = makeMove(board, selectedPiece.row, selectedPiece.col, row, col);\n        const moveNotation = `${selectedPiece.piece.type} ${String.fromCharCode(97 + selectedPiece.col)}${8 - selectedPiece.row} to ${String.fromCharCode(97 + col)}${8 - row}`;\n        setMoveHistory([...moveHistory, moveNotation]);\n        setBoard(newBoard);\n        setSelectedPiece(null);\n        setPlayerTurn('black');\n\n        // Check for checkmate or stalemate here\n        // For simplicity, we're not implementing this check now\n\n        // AI's turn\n        setTimeout(() => {\n          const aiMove = getAIMove(newBoard, 'black', moveHistory);\n          if (aiMove) {\n            const {\n              fromRow,\n              fromCol,\n              toRow,\n              toCol\n            } = aiMove;\n            const aiPiece = newBoard[fromRow][fromCol];\n            const aiMoveBoard = makeMove(newBoard, fromRow, fromCol, toRow, toCol);\n            const aiMoveNotation = `${aiPiece.type} ${String.fromCharCode(97 + fromCol)}${8 - fromRow} to ${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n            setMoveHistory([...moveHistory, moveNotation, aiMoveNotation]);\n            setBoard(aiMoveBoard);\n            setPlayerTurn('white');\n\n            // Check for checkmate or stalemate here\n          }\n        }, 500);\n      }\n    } else {\n      // If no piece is selected and clicked on a piece of the player's color, select it\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({\n          row,\n          col,\n          piece\n        });\n      }\n    }\n  };\n  const resetGame = () => {\n    setBoard(initializeBoard());\n    setSelectedPiece(null);\n    setPlayerTurn('white');\n    setGameStatus('ongoing');\n    setMoveHistory([]);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"AI Chess\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ChessBoard, {\n    board: board,\n    selectedPiece: selectedPiece,\n    onSquareClick: handleSquareClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GameInfo, {\n    playerTurn: playerTurn,\n    gameStatus: gameStatus,\n    moveHistory: moveHistory,\n    onResetGame: resetGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  })));\n}\nexport default App;","map":{"version":3,"names":["React","useState","ChessBoard","GameInfo","initializeBoard","isValidMove","makeMove","getAIMove","App","board","setBoard","selectedPiece","setSelectedPiece","playerTurn","setPlayerTurn","gameStatus","setGameStatus","moveHistory","setMoveHistory","handleSquareClick","row","col","piece","color","newBoard","moveNotation","type","String","fromCharCode","setTimeout","aiMove","fromRow","fromCol","toRow","toCol","aiPiece","aiMoveBoard","aiMoveNotation","resetGame","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSquareClick","onResetGame"],"sources":["/Users/aditya.thakkar/Documents/AI Chess/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport { initializeBoard, isValidMove, makeMove, getAIMove } from './utils/chessLogic';\n\nfunction App() {\n  const [board, setBoard] = useState(initializeBoard());\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [playerTurn, setPlayerTurn] = useState('white');\n  const [gameStatus, setGameStatus] = useState('ongoing');\n  const [moveHistory, setMoveHistory] = useState([]);\n\n  const handleSquareClick = (row, col) => {\n    // If game is over, don't allow any moves\n    if (gameStatus !== 'ongoing') return;\n    \n    // If it's not the player's turn, don't allow any moves\n    if (playerTurn !== 'white') return;\n    \n    const piece = board[row][col];\n    \n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setSelectedPiece(null);\n        return;\n      }\n      \n      // If clicking on a different piece of the same color, select that piece instead\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({ row, col, piece });\n        return;\n      }\n      \n      // Try to make a move\n      if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, moveHistory)) {\n        const newBoard = makeMove(board, selectedPiece.row, selectedPiece.col, row, col);\n        const moveNotation = `${selectedPiece.piece.type} ${String.fromCharCode(97 + selectedPiece.col)}${8 - selectedPiece.row} to ${String.fromCharCode(97 + col)}${8 - row}`;\n        setMoveHistory([...moveHistory, moveNotation]);\n        setBoard(newBoard);\n        setSelectedPiece(null);\n        setPlayerTurn('black');\n        \n        // Check for checkmate or stalemate here\n        // For simplicity, we're not implementing this check now\n        \n        // AI's turn\n        setTimeout(() => {\n          const aiMove = getAIMove(newBoard, 'black', moveHistory);\n          if (aiMove) {\n            const { fromRow, fromCol, toRow, toCol } = aiMove;\n            const aiPiece = newBoard[fromRow][fromCol];\n            const aiMoveBoard = makeMove(newBoard, fromRow, fromCol, toRow, toCol);\n            const aiMoveNotation = `${aiPiece.type} ${String.fromCharCode(97 + fromCol)}${8 - fromRow} to ${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n            setMoveHistory([...moveHistory, moveNotation, aiMoveNotation]);\n            setBoard(aiMoveBoard);\n            setPlayerTurn('white');\n            \n            // Check for checkmate or stalemate here\n          }\n        }, 500);\n      }\n    } else {\n      // If no piece is selected and clicked on a piece of the player's color, select it\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({ row, col, piece });\n      }\n    }\n  };\n\n  const resetGame = () => {\n    setBoard(initializeBoard());\n    setSelectedPiece(null);\n    setPlayerTurn('white');\n    setGameStatus('ongoing');\n    setMoveHistory([]);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>AI Chess</h1>\n      <div className=\"game-container\">\n        <ChessBoard \n          board={board} \n          selectedPiece={selectedPiece} \n          onSquareClick={handleSquareClick} \n        />\n        <GameInfo \n          playerTurn={playerTurn} \n          gameStatus={gameStatus} \n          moveHistory={moveHistory} \n          onResetGame={resetGame} \n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}