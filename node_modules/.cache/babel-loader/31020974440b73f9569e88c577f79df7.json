{"ast":null,"code":"var _jsxFileName = \"/Users/aditya.thakkar/Documents/AI Chess/src/components/ChessBoard.js\";\nimport React, { useMemo, memo } from 'react';\nimport './ChessBoard.css';\n\n// Import SVG pieces\nimport whitePawn from \"../assets/pieces/white-pawn.svg\";\nimport whiteRook from \"../assets/pieces/white-rook.svg\";\nimport whiteKnight from \"../assets/pieces/white-knight.svg\";\nimport whiteBishop from \"../assets/pieces/white-bishop.svg\";\nimport whiteQueen from \"../assets/pieces/white-queen.svg\";\nimport whiteKing from \"../assets/pieces/white-king.svg\";\nimport blackPawn from \"../assets/pieces/black-pawn.svg\";\nimport blackRook from \"../assets/pieces/black-rook.svg\";\nimport blackKnight from \"../assets/pieces/black-knight.svg\";\nimport blackBishop from \"../assets/pieces/black-bishop.svg\";\nimport blackQueen from \"../assets/pieces/black-queen.svg\";\nimport blackKing from \"../assets/pieces/black-king.svg\"; // Map piece types to SVG images - moved outside component for better performance\nconst pieceImages = {\n  'white': {\n    'pawn': whitePawn,\n    'rook': whiteRook,\n    'knight': whiteKnight,\n    'bishop': whiteBishop,\n    'queen': whiteQueen,\n    'king': whiteKing\n  },\n  'black': {\n    'pawn': blackPawn,\n    'rook': blackRook,\n    'knight': blackKnight,\n    'bishop': blackBishop,\n    'queen': blackQueen,\n    'king': blackKing\n  }\n};\n\n// Memoized Square component for better performance\nconst Square = memo(({\n  row,\n  col,\n  piece,\n  isLight,\n  isSelected,\n  isHighlighted,\n  isCheck,\n  isLastMove,\n  isHint,\n  squareColor,\n  onClick\n}) => {\n  let squareClassName = `square ${isLight ? 'light' : 'dark'}`;\n  if (isSelected) squareClassName += ' selected';\n  if (isHighlighted) squareClassName += ' highlighted';\n  if (isCheck) squareClassName += ' check';\n  if (isLastMove) squareClassName += ' last-move';\n  if (isHint) squareClassName += ' hint';\n  const squareStyle = {\n    backgroundColor: squareColor\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: squareClassName,\n    style: squareStyle,\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, piece && !piece.captured && /*#__PURE__*/React.createElement(\"img\", {\n    src: pieceImages[piece.color][piece.type],\n    alt: `${piece.color} ${piece.type}`,\n    className: `piece ${piece.color}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }));\n});\n\n// Memoized coordinates component\nconst Coordinates = memo(() => {\n  const files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n  const ranks = ['8', '7', '6', '5', '4', '3', '2', '1'];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-coordinates\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"files\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, files.map(file => /*#__PURE__*/React.createElement(\"div\", {\n    key: file,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, file))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ranks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, ranks.map(rank => /*#__PURE__*/React.createElement(\"div\", {\n    key: rank,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, rank))));\n});\n\n// Memoized captured pieces component\nconst CapturedPieces = memo(({\n  capturedPieces,\n  color\n}) => {\n  const capturedByOpponent = color === 'white' ? capturedPieces.black : capturedPieces.white;\n  if (capturedByOpponent.length === 0) return null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"captured-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, capturedByOpponent.map((piece, index) => /*#__PURE__*/React.createElement(\"img\", {\n    key: index,\n    src: pieceImages[piece.color][piece.type],\n    alt: `${piece.color} ${piece.type}`,\n    className: \"captured-piece\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  })));\n});\nconst ChessBoard = ({\n  board,\n  selectedPiece,\n  onSquareClick,\n  highlightedSquares,\n  checkIndicator,\n  lastMove,\n  hintMove,\n  theme\n}) => {\n  // Calculate captured pieces - memoized for performance\n  const capturedPieces = useMemo(() => {\n    const captured = {\n      white: [],\n      black: []\n    };\n    board.flat().forEach(piece => {\n      if (piece && piece.captured) {\n        captured[piece.color].push(piece);\n      }\n    });\n    return captured;\n  }, [board]);\n\n  // Check if a square is highlighted (valid move) - memoized lookup map\n  const highlightedSquaresMap = useMemo(() => {\n    const map = {};\n    highlightedSquares.forEach(square => {\n      map[`${square.row}-${square.col}`] = true;\n    });\n    return map;\n  }, [highlightedSquares]);\n  const isHighlighted = (row, col) => {\n    return !!highlightedSquaresMap[`${row}-${col}`];\n  };\n\n  // Check if a square is part of the last move - memoized\n  const lastMoveMap = useMemo(() => {\n    if (!lastMove) return {};\n    const {\n      from,\n      to\n    } = lastMove;\n    return {\n      [`${from.row}-${from.col}`]: true,\n      [`${to.row}-${to.col}`]: true\n    };\n  }, [lastMove]);\n  const isLastMove = (row, col) => {\n    return !!lastMoveMap[`${row}-${col}`];\n  };\n\n  // Check if a square is part of a hint - memoized\n  const hintSquareMap = useMemo(() => {\n    if (!hintMove) return {};\n    const {\n      fromRow,\n      fromCol,\n      toRow,\n      toCol\n    } = hintMove;\n    return {\n      [`${fromRow}-${fromCol}`]: true,\n      [`${toRow}-${toCol}`]: true\n    };\n  }, [hintMove]);\n  const isHintSquare = (row, col) => {\n    return !!hintSquareMap[`${row}-${col}`];\n  };\n\n  // Render the board - memoized for performance\n  const boardRows = useMemo(() => {\n    const squares = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        const isLight = (row + col) % 2 === 0;\n        const isSelected = selectedPiece && selectedPiece.row === row && selectedPiece.col === col;\n        const isCheck = checkIndicator && piece && piece.type === 'king' && piece.color === checkIndicator;\n        squares.push(/*#__PURE__*/React.createElement(Square, {\n          key: `${row}-${col}`,\n          row: row,\n          col: col,\n          piece: piece,\n          isLight: isLight,\n          isSelected: isSelected,\n          isHighlighted: isHighlighted(row, col),\n          isCheck: isCheck,\n          isLastMove: isLastMove(row, col),\n          isHint: isHintSquare(row, col),\n          squareColor: isLight ? theme.lightSquare : theme.darkSquare,\n          onClick: () => onSquareClick(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 11\n          }\n        }));\n      }\n    }\n    return squares;\n  }, [board, selectedPiece, checkIndicator, theme, onSquareClick, isHighlighted, isLastMove, isHintSquare]);\n\n  // Apply theme styles\n  const containerStyle = useMemo(() => ({\n    background: theme.boardBg,\n    '--highlight-color': theme.highlightColor,\n    '--check-color': theme.checkColor,\n    '--last-move-color': theme.lastMoveColor,\n    '--accent-color': theme.accentColor\n  }), [theme]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chess-board-container\",\n    style: containerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chess-board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }, boardRows), /*#__PURE__*/React.createElement(Coordinates, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"captured-pieces\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CapturedPieces, {\n    capturedPieces: capturedPieces,\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CapturedPieces, {\n    capturedPieces: capturedPieces,\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  })));\n};\nexport default memo(ChessBoard);","map":{"version":3,"names":["React","useMemo","memo","whitePawn","whiteRook","whiteKnight","whiteBishop","whiteQueen","whiteKing","blackPawn","blackRook","blackKnight","blackBishop","blackQueen","blackKing","pieceImages","Square","row","col","piece","isLight","isSelected","isHighlighted","isCheck","isLastMove","isHint","squareColor","onClick","squareClassName","squareStyle","backgroundColor","createElement","className","style","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","captured","src","color","type","alt","Coordinates","files","ranks","map","file","key","rank","CapturedPieces","capturedPieces","capturedByOpponent","black","white","length","index","ChessBoard","board","selectedPiece","onSquareClick","highlightedSquares","checkIndicator","lastMove","hintMove","theme","flat","forEach","push","highlightedSquaresMap","square","lastMoveMap","from","to","hintSquareMap","fromRow","fromCol","toRow","toCol","isHintSquare","boardRows","squares","lightSquare","darkSquare","containerStyle","background","boardBg","highlightColor","checkColor","lastMoveColor","accentColor"],"sources":["/Users/aditya.thakkar/Documents/AI Chess/src/components/ChessBoard.js"],"sourcesContent":["import React, { useMemo, memo } from 'react';\nimport './ChessBoard.css';\n\n// Import SVG pieces\nimport whitePawn from '../assets/pieces/white-pawn.svg';\nimport whiteRook from '../assets/pieces/white-rook.svg';\nimport whiteKnight from '../assets/pieces/white-knight.svg';\nimport whiteBishop from '../assets/pieces/white-bishop.svg';\nimport whiteQueen from '../assets/pieces/white-queen.svg';\nimport whiteKing from '../assets/pieces/white-king.svg';\nimport blackPawn from '../assets/pieces/black-pawn.svg';\nimport blackRook from '../assets/pieces/black-rook.svg';\nimport blackKnight from '../assets/pieces/black-knight.svg';\nimport blackBishop from '../assets/pieces/black-bishop.svg';\nimport blackQueen from '../assets/pieces/black-queen.svg';\nimport blackKing from '../assets/pieces/black-king.svg';\n\n// Map piece types to SVG images - moved outside component for better performance\nconst pieceImages = {\n  'white': {\n    'pawn': whitePawn,\n    'rook': whiteRook,\n    'knight': whiteKnight,\n    'bishop': whiteBishop,\n    'queen': whiteQueen,\n    'king': whiteKing\n  },\n  'black': {\n    'pawn': blackPawn,\n    'rook': blackRook,\n    'knight': blackKnight,\n    'bishop': blackBishop,\n    'queen': blackQueen,\n    'king': blackKing\n  }\n};\n\n// Memoized Square component for better performance\nconst Square = memo(({ \n  row, \n  col, \n  piece, \n  isLight, \n  isSelected, \n  isHighlighted, \n  isCheck, \n  isLastMove, \n  isHint, \n  squareColor, \n  onClick \n}) => {\n  let squareClassName = `square ${isLight ? 'light' : 'dark'}`;\n  if (isSelected) squareClassName += ' selected';\n  if (isHighlighted) squareClassName += ' highlighted';\n  if (isCheck) squareClassName += ' check';\n  if (isLastMove) squareClassName += ' last-move';\n  if (isHint) squareClassName += ' hint';\n  \n  const squareStyle = {\n    backgroundColor: squareColor\n  };\n  \n  return (\n    <div \n      className={squareClassName}\n      style={squareStyle}\n      onClick={onClick}\n    >\n      {piece && !piece.captured && (\n        <img \n          src={pieceImages[piece.color][piece.type]} \n          alt={`${piece.color} ${piece.type}`} \n          className={`piece ${piece.color}`}\n        />\n      )}\n    </div>\n  );\n});\n\n// Memoized coordinates component\nconst Coordinates = memo(() => {\n  const files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n  const ranks = ['8', '7', '6', '5', '4', '3', '2', '1'];\n  \n  return (\n    <div className=\"board-coordinates\">\n      <div className=\"files\">\n        {files.map(file => (\n          <div key={file}>{file}</div>\n        ))}\n      </div>\n      <div className=\"ranks\">\n        {ranks.map(rank => (\n          <div key={rank}>{rank}</div>\n        ))}\n      </div>\n    </div>\n  );\n});\n\n// Memoized captured pieces component\nconst CapturedPieces = memo(({ capturedPieces, color }) => {\n  const capturedByOpponent = color === 'white' ? capturedPieces.black : capturedPieces.white;\n  \n  if (capturedByOpponent.length === 0) return null;\n  \n  return (\n    <div className=\"captured-row\">\n      {capturedByOpponent.map((piece, index) => (\n        <img \n          key={index}\n          src={pieceImages[piece.color][piece.type]} \n          alt={`${piece.color} ${piece.type}`} \n          className=\"captured-piece\"\n        />\n      ))}\n    </div>\n  );\n});\n\nconst ChessBoard = ({ \n  board, \n  selectedPiece, \n  onSquareClick, \n  highlightedSquares, \n  checkIndicator,\n  lastMove,\n  hintMove,\n  theme\n}) => {\n  // Calculate captured pieces - memoized for performance\n  const capturedPieces = useMemo(() => {\n    const captured = {\n      white: [],\n      black: []\n    };\n    \n    board.flat().forEach(piece => {\n      if (piece && piece.captured) {\n        captured[piece.color].push(piece);\n      }\n    });\n    \n    return captured;\n  }, [board]);\n\n  // Check if a square is highlighted (valid move) - memoized lookup map\n  const highlightedSquaresMap = useMemo(() => {\n    const map = {};\n    highlightedSquares.forEach(square => {\n      map[`${square.row}-${square.col}`] = true;\n    });\n    return map;\n  }, [highlightedSquares]);\n  \n  const isHighlighted = (row, col) => {\n    return !!highlightedSquaresMap[`${row}-${col}`];\n  };\n\n  // Check if a square is part of the last move - memoized\n  const lastMoveMap = useMemo(() => {\n    if (!lastMove) return {};\n    \n    const { from, to } = lastMove;\n    return {\n      [`${from.row}-${from.col}`]: true,\n      [`${to.row}-${to.col}`]: true\n    };\n  }, [lastMove]);\n  \n  const isLastMove = (row, col) => {\n    return !!lastMoveMap[`${row}-${col}`];\n  };\n\n  // Check if a square is part of a hint - memoized\n  const hintSquareMap = useMemo(() => {\n    if (!hintMove) return {};\n    \n    const { fromRow, fromCol, toRow, toCol } = hintMove;\n    return {\n      [`${fromRow}-${fromCol}`]: true,\n      [`${toRow}-${toCol}`]: true\n    };\n  }, [hintMove]);\n  \n  const isHintSquare = (row, col) => {\n    return !!hintSquareMap[`${row}-${col}`];\n  };\n\n  // Render the board - memoized for performance\n  const boardRows = useMemo(() => {\n    const squares = [];\n    \n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        const isLight = (row + col) % 2 === 0;\n        const isSelected = selectedPiece && selectedPiece.row === row && selectedPiece.col === col;\n        const isCheck = checkIndicator && piece && piece.type === 'king' && piece.color === checkIndicator;\n        \n        squares.push(\n          <Square \n            key={`${row}-${col}`}\n            row={row}\n            col={col}\n            piece={piece}\n            isLight={isLight}\n            isSelected={isSelected}\n            isHighlighted={isHighlighted(row, col)}\n            isCheck={isCheck}\n            isLastMove={isLastMove(row, col)}\n            isHint={isHintSquare(row, col)}\n            squareColor={isLight ? theme.lightSquare : theme.darkSquare}\n            onClick={() => onSquareClick(row, col)}\n          />\n        );\n      }\n    }\n    \n    return squares;\n  }, [board, selectedPiece, checkIndicator, theme, onSquareClick, isHighlighted, isLastMove, isHintSquare]);\n\n  // Apply theme styles\n  const containerStyle = useMemo(() => ({\n    background: theme.boardBg,\n    '--highlight-color': theme.highlightColor,\n    '--check-color': theme.checkColor,\n    '--last-move-color': theme.lastMoveColor,\n    '--accent-color': theme.accentColor\n  }), [theme]);\n\n  return (\n    <div className=\"chess-board-container\" style={containerStyle}>\n      <div className=\"chess-board\">\n        {boardRows}\n      </div>\n      <Coordinates />\n      <div className=\"captured-pieces\">\n        <CapturedPieces capturedPieces={capturedPieces} color=\"white\" />\n        <CapturedPieces capturedPieces={capturedPieces} color=\"black\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ChessBoard); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}