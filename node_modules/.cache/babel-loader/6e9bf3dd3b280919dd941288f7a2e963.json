{"ast":null,"code":"var _jsxFileName = \"/Users/aditya.thakkar/Documents/AI Chess/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport { initializeBoard, isValidMove, makeMove, getAIMove, isInCheck, isCheckmate, isStalemate } from './utils/chessLogic';\nfunction App() {\n  const [board, setBoard] = useState(initializeBoard());\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [playerTurn, setPlayerTurn] = useState('white');\n  const [gameStatus, setGameStatus] = useState('ongoing');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameState, setGameState] = useState({\n    enPassantTarget: null,\n    castlingRights: {\n      white: {\n        kingSide: true,\n        queenSide: true\n      },\n      black: {\n        kingSide: true,\n        queenSide: true\n      }\n    }\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState([]);\n  const [checkIndicator, setCheckIndicator] = useState(null);\n  const [aiDifficulty, setAiDifficulty] = useState('medium'); // 'easy', 'medium', 'hard'\n  const [showHint, setShowHint] = useState(false);\n  const [hintMove, setHintMove] = useState(null);\n  // const [promotionDialog, setPromotionDialog] = useState(null);\n\n  // Check for check, checkmate, or stalemate after each move\n  useEffect(() => {\n    if (gameStatus !== 'ongoing') return;\n    const currentPlayer = playerTurn;\n    const opponent = currentPlayer === 'white' ? 'black' : 'white';\n\n    // Check if the current player is in check\n    if (isInCheck(board, currentPlayer)) {\n      setCheckIndicator(currentPlayer);\n\n      // Check if it's checkmate\n      if (isCheckmate(board, currentPlayer)) {\n        setGameStatus(`${opponent} wins by checkmate`);\n        return;\n      }\n    } else {\n      setCheckIndicator(null);\n\n      // Check if it's stalemate\n      if (isStalemate(board, currentPlayer)) {\n        setGameStatus('draw by stalemate');\n        return;\n      }\n    }\n  }, [board, playerTurn, gameStatus]);\n\n  // Calculate valid moves for the selected piece\n  useEffect(() => {\n    if (selectedPiece) {\n      const validMoves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n            validMoves.push({\n              row,\n              col\n            });\n          }\n        }\n      }\n      setHighlightedSquares(validMoves);\n    } else {\n      setHighlightedSquares([]);\n    }\n  }, [selectedPiece, board, gameState]);\n\n  // AI's turn\n  useEffect(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing') {\n      // AI thinking time varies by difficulty\n      const thinkingTimes = {\n        'easy': [300, 700],\n        'medium': [500, 1000],\n        'hard': [800, 1500]\n      };\n      const [minTime, maxTime] = thinkingTimes[aiDifficulty];\n      const aiThinkingTime = Math.random() * (maxTime - minTime) + minTime;\n      const aiMoveTimeout = setTimeout(() => {\n        // AI search depth varies by difficulty\n        const searchDepth = {\n          'easy': 1,\n          'medium': 2,\n          'hard': 3\n        }[aiDifficulty];\n        const aiMove = getAIMove(board, 'black', gameState, searchDepth);\n        if (aiMove) {\n          const {\n            fromRow,\n            fromCol,\n            toRow,\n            toCol\n          } = aiMove;\n          const aiPiece = board[fromRow][fromCol];\n\n          // Make the AI move\n          const {\n            board: newBoard,\n            gameState: newGameState\n          } = makeMove(board, fromRow, fromCol, toRow, toCol, gameState);\n\n          // Create move notation\n          const pieceSymbol = getPieceSymbol(aiPiece.type);\n          const fromSquare = `${String.fromCharCode(97 + fromCol)}${8 - fromRow}`;\n          const toSquare = `${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n          const captureSymbol = board[toRow][toCol] ? 'x' : '';\n          let moveNotation = `${pieceSymbol}${fromSquare}${captureSymbol}${toSquare}`;\n\n          // Check if the move results in check or checkmate\n          if (isCheckmate(newBoard, 'white')) {\n            moveNotation += '#';\n          } else if (isInCheck(newBoard, 'white')) {\n            moveNotation += '+';\n          }\n\n          // Update the game state\n          setBoard(newBoard);\n          setGameState(newGameState);\n          setMoveHistory([...moveHistory, {\n            notation: moveNotation,\n            color: 'black',\n            from: {\n              row: fromRow,\n              col: fromCol\n            },\n            to: {\n              row: toRow,\n              col: toCol\n            },\n            capturedPiece: board[toRow][toCol]\n          }]);\n          setPlayerTurn('white');\n          setShowHint(false);\n          setHintMove(null);\n        }\n      }, aiThinkingTime);\n      return () => clearTimeout(aiMoveTimeout);\n    }\n  }, [playerTurn, board, gameStatus, gameState, moveHistory, aiDifficulty]);\n  const getPieceSymbol = pieceType => {\n    switch (pieceType) {\n      case 'pawn':\n        return '';\n      case 'knight':\n        return 'N';\n      case 'bishop':\n        return 'B';\n      case 'rook':\n        return 'R';\n      case 'queen':\n        return 'Q';\n      case 'king':\n        return 'K';\n      default:\n        return '';\n    }\n  };\n  const handleSquareClick = (row, col) => {\n    // If game is over, don't allow any moves\n    if (gameStatus !== 'ongoing') return;\n\n    // If it's not the player's turn, don't allow any moves\n    if (playerTurn !== 'white') return;\n    const piece = board[row][col];\n\n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setSelectedPiece(null);\n        return;\n      }\n\n      // If clicking on a different piece of the same color, select that piece instead\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({\n          row,\n          col,\n          piece\n        });\n        return;\n      }\n\n      // Try to make a move\n      if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n        const {\n          board: newBoard,\n          gameState: newGameState\n        } = makeMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState);\n\n        // Create move notation\n        const pieceSymbol = getPieceSymbol(selectedPiece.piece.type);\n        const fromSquare = `${String.fromCharCode(97 + selectedPiece.col)}${8 - selectedPiece.row}`;\n        const toSquare = `${String.fromCharCode(97 + col)}${8 - row}`;\n        const captureSymbol = board[row][col] ? 'x' : '';\n        let moveNotation = `${pieceSymbol}${fromSquare}${captureSymbol}${toSquare}`;\n\n        // Check if the move results in check or checkmate\n        if (isCheckmate(newBoard, 'black')) {\n          moveNotation += '#';\n        } else if (isInCheck(newBoard, 'black')) {\n          moveNotation += '+';\n        }\n\n        // Update the game state\n        setBoard(newBoard);\n        setGameState(newGameState);\n        setMoveHistory([...moveHistory, {\n          notation: moveNotation,\n          color: 'white',\n          from: {\n            row: selectedPiece.row,\n            col: selectedPiece.col\n          },\n          to: {\n            row,\n            col\n          },\n          capturedPiece: board[row][col]\n        }]);\n        setSelectedPiece(null);\n        setPlayerTurn('black');\n        setShowHint(false);\n        setHintMove(null);\n      }\n    } else {\n      // If no piece is selected and clicked on a piece of the player's color, select it\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({\n          row,\n          col,\n          piece\n        });\n      }\n    }\n  };\n  const resetGame = () => {\n    setBoard(initializeBoard());\n    setSelectedPiece(null);\n    setPlayerTurn('white');\n    setGameStatus('ongoing');\n    setMoveHistory([]);\n    setGameState({\n      enPassantTarget: null,\n      castlingRights: {\n        white: {\n          kingSide: true,\n          queenSide: true\n        },\n        black: {\n          kingSide: true,\n          queenSide: true\n        }\n      }\n    });\n    setHighlightedSquares([]);\n    setCheckIndicator(null);\n    setShowHint(false);\n    setHintMove(null);\n  };\n  const handleDifficultyChange = difficulty => {\n    setAiDifficulty(difficulty);\n    // Optionally reset the game when difficulty changes\n    if (window.confirm('Change AI difficulty? Current game will be reset.')) {\n      resetGame();\n    }\n  };\n  const getHint = () => {\n    // Use the AI to suggest a move for the player\n    if (playerTurn === 'white' && gameStatus === 'ongoing') {\n      const suggestedMove = getAIMove(board, 'white', gameState, 2);\n      if (suggestedMove) {\n        setShowHint(true);\n        setHintMove(suggestedMove);\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }\n  }, \"AI Chess\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"difficulty-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }\n  }, \"AI Difficulty:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'easy' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('easy'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 11\n    }\n  }, \"Easy\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'medium' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('medium'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 11\n    }\n  }, \"Medium\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `difficulty-button ${aiDifficulty === 'hard' ? 'active' : ''}`,\n    onClick: () => handleDifficultyChange('hard'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 11\n    }\n  }, \"Hard\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ChessBoard, {\n    board: board,\n    selectedPiece: selectedPiece,\n    onSquareClick: handleSquareClick,\n    highlightedSquares: highlightedSquares,\n    checkIndicator: checkIndicator,\n    lastMove: moveHistory.length > 0 ? moveHistory[moveHistory.length - 1] : null,\n    hintMove: showHint ? hintMove : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GameInfo, {\n    playerTurn: playerTurn,\n    gameStatus: gameStatus,\n    moveHistory: moveHistory,\n    onResetGame: resetGame,\n    isInCheck: checkIndicator !== null,\n    aiDifficulty: aiDifficulty,\n    onGetHint: getHint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }\n  }, \"Chess AI with Minimax Algorithm & Alpha-Beta Pruning\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }\n  }, \"\\xA9 \", new Date().getFullYear(), \" AI Chess\")));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","ChessBoard","GameInfo","initializeBoard","isValidMove","makeMove","getAIMove","isInCheck","isCheckmate","isStalemate","App","board","setBoard","selectedPiece","setSelectedPiece","playerTurn","setPlayerTurn","gameStatus","setGameStatus","moveHistory","setMoveHistory","gameState","setGameState","enPassantTarget","castlingRights","white","kingSide","queenSide","black","highlightedSquares","setHighlightedSquares","checkIndicator","setCheckIndicator","aiDifficulty","setAiDifficulty","showHint","setShowHint","hintMove","setHintMove","currentPlayer","opponent","validMoves","row","col","push","thinkingTimes","minTime","maxTime","aiThinkingTime","Math","random","aiMoveTimeout","setTimeout","searchDepth","aiMove","fromRow","fromCol","toRow","toCol","aiPiece","newBoard","newGameState","pieceSymbol","getPieceSymbol","type","fromSquare","String","fromCharCode","toSquare","captureSymbol","moveNotation","notation","color","from","to","capturedPiece","clearTimeout","pieceType","handleSquareClick","piece","resetGame","handleDifficultyChange","difficulty","window","confirm","getHint","suggestedMove","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSquareClick","lastMove","length","onResetGame","onGetHint","Date","getFullYear"],"sources":["/Users/aditya.thakkar/Documents/AI Chess/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport { \n  initializeBoard, \n  isValidMove, \n  makeMove, \n  getAIMove, \n  isInCheck, \n  isCheckmate, \n  isStalemate \n} from './utils/chessLogic';\n\nfunction App() {\n  const [board, setBoard] = useState(initializeBoard());\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [playerTurn, setPlayerTurn] = useState('white');\n  const [gameStatus, setGameStatus] = useState('ongoing');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameState, setGameState] = useState({\n    enPassantTarget: null,\n    castlingRights: {\n      white: { kingSide: true, queenSide: true },\n      black: { kingSide: true, queenSide: true }\n    }\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState([]);\n  const [checkIndicator, setCheckIndicator] = useState(null);\n  const [aiDifficulty, setAiDifficulty] = useState('medium'); // 'easy', 'medium', 'hard'\n  const [showHint, setShowHint] = useState(false);\n  const [hintMove, setHintMove] = useState(null);\n  // const [promotionDialog, setPromotionDialog] = useState(null);\n\n  // Check for check, checkmate, or stalemate after each move\n  useEffect(() => {\n    if (gameStatus !== 'ongoing') return;\n\n    const currentPlayer = playerTurn;\n    const opponent = currentPlayer === 'white' ? 'black' : 'white';\n\n    // Check if the current player is in check\n    if (isInCheck(board, currentPlayer)) {\n      setCheckIndicator(currentPlayer);\n      \n      // Check if it's checkmate\n      if (isCheckmate(board, currentPlayer)) {\n        setGameStatus(`${opponent} wins by checkmate`);\n        return;\n      }\n    } else {\n      setCheckIndicator(null);\n      \n      // Check if it's stalemate\n      if (isStalemate(board, currentPlayer)) {\n        setGameStatus('draw by stalemate');\n        return;\n      }\n    }\n  }, [board, playerTurn, gameStatus]);\n\n  // Calculate valid moves for the selected piece\n  useEffect(() => {\n    if (selectedPiece) {\n      const validMoves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n            validMoves.push({ row, col });\n          }\n        }\n      }\n      setHighlightedSquares(validMoves);\n    } else {\n      setHighlightedSquares([]);\n    }\n  }, [selectedPiece, board, gameState]);\n\n  // AI's turn\n  useEffect(() => {\n    if (playerTurn === 'black' && gameStatus === 'ongoing') {\n      // AI thinking time varies by difficulty\n      const thinkingTimes = {\n        'easy': [300, 700],\n        'medium': [500, 1000],\n        'hard': [800, 1500]\n      };\n      \n      const [minTime, maxTime] = thinkingTimes[aiDifficulty];\n      const aiThinkingTime = Math.random() * (maxTime - minTime) + minTime;\n      \n      const aiMoveTimeout = setTimeout(() => {\n        // AI search depth varies by difficulty\n        const searchDepth = {\n          'easy': 1,\n          'medium': 2,\n          'hard': 3\n        }[aiDifficulty];\n        \n        const aiMove = getAIMove(board, 'black', gameState, searchDepth);\n        \n        if (aiMove) {\n          const { fromRow, fromCol, toRow, toCol } = aiMove;\n          const aiPiece = board[fromRow][fromCol];\n          \n          // Make the AI move\n          const { board: newBoard, gameState: newGameState } = makeMove(\n            board, \n            fromRow, \n            fromCol, \n            toRow, \n            toCol, \n            gameState\n          );\n          \n          // Create move notation\n          const pieceSymbol = getPieceSymbol(aiPiece.type);\n          const fromSquare = `${String.fromCharCode(97 + fromCol)}${8 - fromRow}`;\n          const toSquare = `${String.fromCharCode(97 + toCol)}${8 - toRow}`;\n          const captureSymbol = board[toRow][toCol] ? 'x' : '';\n          \n          let moveNotation = `${pieceSymbol}${fromSquare}${captureSymbol}${toSquare}`;\n          \n          // Check if the move results in check or checkmate\n          if (isCheckmate(newBoard, 'white')) {\n            moveNotation += '#';\n          } else if (isInCheck(newBoard, 'white')) {\n            moveNotation += '+';\n          }\n          \n          // Update the game state\n          setBoard(newBoard);\n          setGameState(newGameState);\n          setMoveHistory([...moveHistory, { \n            notation: moveNotation, \n            color: 'black',\n            from: { row: fromRow, col: fromCol },\n            to: { row: toRow, col: toCol },\n            capturedPiece: board[toRow][toCol]\n          }]);\n          setPlayerTurn('white');\n          setShowHint(false);\n          setHintMove(null);\n        }\n      }, aiThinkingTime);\n      \n      return () => clearTimeout(aiMoveTimeout);\n    }\n  }, [playerTurn, board, gameStatus, gameState, moveHistory, aiDifficulty]);\n\n  const getPieceSymbol = (pieceType) => {\n    switch (pieceType) {\n      case 'pawn': return '';\n      case 'knight': return 'N';\n      case 'bishop': return 'B';\n      case 'rook': return 'R';\n      case 'queen': return 'Q';\n      case 'king': return 'K';\n      default: return '';\n    }\n  };\n\n  const handleSquareClick = (row, col) => {\n    // If game is over, don't allow any moves\n    if (gameStatus !== 'ongoing') return;\n    \n    // If it's not the player's turn, don't allow any moves\n    if (playerTurn !== 'white') return;\n    \n    const piece = board[row][col];\n    \n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setSelectedPiece(null);\n        return;\n      }\n      \n      // If clicking on a different piece of the same color, select that piece instead\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({ row, col, piece });\n        return;\n      }\n      \n      // Try to make a move\n      if (isValidMove(board, selectedPiece.row, selectedPiece.col, row, col, gameState)) {\n        const { board: newBoard, gameState: newGameState } = makeMove(\n          board, \n          selectedPiece.row, \n          selectedPiece.col, \n          row, \n          col, \n          gameState\n        );\n        \n        // Create move notation\n        const pieceSymbol = getPieceSymbol(selectedPiece.piece.type);\n        const fromSquare = `${String.fromCharCode(97 + selectedPiece.col)}${8 - selectedPiece.row}`;\n        const toSquare = `${String.fromCharCode(97 + col)}${8 - row}`;\n        const captureSymbol = board[row][col] ? 'x' : '';\n        \n        let moveNotation = `${pieceSymbol}${fromSquare}${captureSymbol}${toSquare}`;\n        \n        // Check if the move results in check or checkmate\n        if (isCheckmate(newBoard, 'black')) {\n          moveNotation += '#';\n        } else if (isInCheck(newBoard, 'black')) {\n          moveNotation += '+';\n        }\n        \n        // Update the game state\n        setBoard(newBoard);\n        setGameState(newGameState);\n        setMoveHistory([...moveHistory, { \n          notation: moveNotation, \n          color: 'white',\n          from: { row: selectedPiece.row, col: selectedPiece.col },\n          to: { row, col },\n          capturedPiece: board[row][col]\n        }]);\n        setSelectedPiece(null);\n        setPlayerTurn('black');\n        setShowHint(false);\n        setHintMove(null);\n      }\n    } else {\n      // If no piece is selected and clicked on a piece of the player's color, select it\n      if (piece && piece.color === playerTurn) {\n        setSelectedPiece({ row, col, piece });\n      }\n    }\n  };\n\n  const resetGame = () => {\n    setBoard(initializeBoard());\n    setSelectedPiece(null);\n    setPlayerTurn('white');\n    setGameStatus('ongoing');\n    setMoveHistory([]);\n    setGameState({\n      enPassantTarget: null,\n      castlingRights: {\n        white: { kingSide: true, queenSide: true },\n        black: { kingSide: true, queenSide: true }\n      }\n    });\n    setHighlightedSquares([]);\n    setCheckIndicator(null);\n    setShowHint(false);\n    setHintMove(null);\n  };\n\n  const handleDifficultyChange = (difficulty) => {\n    setAiDifficulty(difficulty);\n    // Optionally reset the game when difficulty changes\n    if (window.confirm('Change AI difficulty? Current game will be reset.')) {\n      resetGame();\n    }\n  };\n\n  const getHint = () => {\n    // Use the AI to suggest a move for the player\n    if (playerTurn === 'white' && gameStatus === 'ongoing') {\n      const suggestedMove = getAIMove(board, 'white', gameState, 2);\n      if (suggestedMove) {\n        setShowHint(true);\n        setHintMove(suggestedMove);\n      }\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>AI Chess</h1>\n      <div className=\"difficulty-selector\">\n        <span className=\"difficulty-label\">AI Difficulty:</span>\n        <div className=\"difficulty-buttons\">\n          <button \n            className={`difficulty-button ${aiDifficulty === 'easy' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('easy')}\n          >\n            Easy\n          </button>\n          <button \n            className={`difficulty-button ${aiDifficulty === 'medium' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('medium')}\n          >\n            Medium\n          </button>\n          <button \n            className={`difficulty-button ${aiDifficulty === 'hard' ? 'active' : ''}`}\n            onClick={() => handleDifficultyChange('hard')}\n          >\n            Hard\n          </button>\n        </div>\n      </div>\n      <div className=\"game-container\">\n        <ChessBoard \n          board={board} \n          selectedPiece={selectedPiece} \n          onSquareClick={handleSquareClick}\n          highlightedSquares={highlightedSquares}\n          checkIndicator={checkIndicator}\n          lastMove={moveHistory.length > 0 ? moveHistory[moveHistory.length - 1] : null}\n          hintMove={showHint ? hintMove : null}\n        />\n        <GameInfo \n          playerTurn={playerTurn} \n          gameStatus={gameStatus} \n          moveHistory={moveHistory} \n          onResetGame={resetGame} \n          isInCheck={checkIndicator !== null}\n          aiDifficulty={aiDifficulty}\n          onGetHint={getHint}\n        />\n      </div>\n      <div className=\"app-footer\">\n        <p>Chess AI with Minimax Algorithm & Alpha-Beta Pruning</p>\n        <p>© {new Date().getFullYear()} AI Chess</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}