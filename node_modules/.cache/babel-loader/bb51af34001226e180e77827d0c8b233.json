{"ast":null,"code":"var _jsxFileName = \"/Users/aditya.thakkar/Documents/AI Chess/src/components/ChessBoard.js\";\nimport React, { useState, useEffect } from 'react';\nimport './ChessBoard.css';\n\n// Import SVG pieces\nimport whitePawn from \"../assets/pieces/white-pawn.svg\";\nimport whiteKnight from \"../assets/pieces/white-knight.svg\";\nimport whiteBishop from \"../assets/pieces/white-bishop.svg\";\nimport whiteRook from \"../assets/pieces/white-rook.svg\";\nimport whiteQueen from \"../assets/pieces/white-queen.svg\";\nimport whiteKing from \"../assets/pieces/white-king.svg\";\nimport blackPawn from \"../assets/pieces/black-pawn.svg\";\nimport blackKnight from \"../assets/pieces/black-knight.svg\";\nimport blackBishop from \"../assets/pieces/black-bishop.svg\";\nimport blackRook from \"../assets/pieces/black-rook.svg\";\nimport blackQueen from \"../assets/pieces/black-queen.svg\";\nimport blackKing from \"../assets/pieces/black-king.svg\";\nconst ChessBoard = ({\n  board,\n  selectedPiece,\n  onSquareClick,\n  highlightedSquares = [],\n  checkIndicator = null,\n  lastMove = null,\n  hintMove = null\n}) => {\n  const [capturedPieces, setCapturedPieces] = useState({\n    white: [],\n    black: []\n  });\n\n  // Map piece types to SVG images\n  const pieceImages = {\n    'white': {\n      'pawn': whitePawn,\n      'knight': whiteKnight,\n      'bishop': whiteBishop,\n      'rook': whiteRook,\n      'queen': whiteQueen,\n      'king': whiteKing\n    },\n    'black': {\n      'pawn': blackPawn,\n      'knight': blackKnight,\n      'bishop': blackBishop,\n      'rook': blackRook,\n      'queen': blackQueen,\n      'king': blackKing\n    }\n  };\n\n  // Track captured pieces\n  useEffect(() => {\n    const whitePieces = [];\n    const blackPieces = [];\n\n    // Count all pieces that should be on the board\n    const expectedPieces = {\n      'pawn': 8,\n      'rook': 2,\n      'knight': 2,\n      'bishop': 2,\n      'queen': 1,\n      'king': 1\n    };\n\n    // Count pieces actually on the board\n    const actualPieces = {\n      'white': {\n        'pawn': 0,\n        'rook': 0,\n        'knight': 0,\n        'bishop': 0,\n        'queen': 0,\n        'king': 0\n      },\n      'black': {\n        'pawn': 0,\n        'rook': 0,\n        'knight': 0,\n        'bishop': 0,\n        'queen': 0,\n        'king': 0\n      }\n    };\n\n    // Count pieces on the board\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece) {\n          actualPieces[piece.color][piece.type]++;\n        }\n      }\n    }\n\n    // Calculate captured pieces\n    for (const pieceType in expectedPieces) {\n      const whiteCaptured = expectedPieces[pieceType] - actualPieces['white'][pieceType];\n      const blackCaptured = expectedPieces[pieceType] - actualPieces['black'][pieceType];\n      for (let i = 0; i < whiteCaptured; i++) {\n        whitePieces.push(pieceType);\n      }\n      for (let i = 0; i < blackCaptured; i++) {\n        blackPieces.push(pieceType);\n      }\n    }\n    setCapturedPieces({\n      white: whitePieces,\n      black: blackPieces\n    });\n  }, [board]);\n  const renderSquare = (row, col) => {\n    const piece = board[row][col];\n    const isSelected = selectedPiece && selectedPiece.row === row && selectedPiece.col === col;\n    const isLightSquare = (row + col) % 2 === 0;\n\n    // Check if this square is a valid move destination\n    const isValidMove = highlightedSquares.some(square => square.row === row && square.col === col);\n\n    // Check if this square contains a king in check\n    const isCheck = checkIndicator && piece && piece.type === 'king' && piece.color === checkIndicator;\n\n    // Check if this square was part of the last move\n    const isLastMoveFrom = lastMove && lastMove.from && lastMove.from.row === row && lastMove.from.col === col;\n    const isLastMoveTo = lastMove && lastMove.to && lastMove.to.row === row && lastMove.to.col === col;\n\n    // Check if this square is part of the hint move\n    const isHintFrom = hintMove && hintMove.fromRow === row && hintMove.fromCol === col;\n    const isHintTo = hintMove && hintMove.toRow === row && hintMove.toCol === col;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: `${row}-${col}`,\n      className: `\n          square \n          ${isLightSquare ? 'light' : 'dark'} \n          ${isSelected ? 'selected' : ''} \n          ${isValidMove ? 'valid-move' : ''}\n          ${isCheck ? 'check' : ''}\n          ${isLastMoveFrom ? 'last-move-from' : ''}\n          ${isLastMoveTo ? 'last-move-to' : ''}\n          ${isHintFrom ? 'hint-from' : ''}\n          ${isHintTo ? 'hint-to' : ''}\n        `,\n      onClick: () => onSquareClick(row, col),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, isValidMove && !piece && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"move-indicator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 35\n      }\n    }), piece && /*#__PURE__*/React.createElement(\"div\", {\n      className: `piece ${piece.color}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: pieceImages[piece.color][piece.type],\n      alt: `${piece.color} ${piece.type}`,\n      className: \"piece-image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    })), isHintFrom && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hint-indicator from\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 24\n      }\n    }), isHintTo && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hint-indicator to\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 22\n      }\n    }), row === 7 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"file-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 23\n      }\n    }, String.fromCharCode(97 + col)), col === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rank-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 23\n      }\n    }, 8 - row));\n  };\n  const renderBoard = () => {\n    const rows = [];\n    for (let row = 0; row < 8; row++) {\n      const cols = [];\n      for (let col = 0; col < 8; col++) {\n        cols.push(renderSquare(row, col));\n      }\n      rows.push(/*#__PURE__*/React.createElement(\"div\", {\n        key: row,\n        className: \"board-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }\n      }, cols));\n    }\n    return rows;\n  };\n  const renderCapturedPieces = color => {\n    return capturedPieces[color].map((pieceType, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: `${color}-${pieceType}-${index}`,\n        className: `captured-piece ${color}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: pieceImages[color === 'white' ? 'white' : 'black'][pieceType],\n        alt: `${color} ${pieceType}`,\n        className: \"captured-piece-image\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }\n      }));\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chess-board-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"captured-pieces black-captured\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, renderCapturedPieces('black')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chess-board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, renderBoard()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"captured-pieces white-captured\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }, renderCapturedPieces('white')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-coordinates\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"files\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].map(file => /*#__PURE__*/React.createElement(\"div\", {\n    key: file,\n    className: \"coordinate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, file))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ranks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, [8, 7, 6, 5, 4, 3, 2, 1].map(rank => /*#__PURE__*/React.createElement(\"div\", {\n    key: rank,\n    className: \"coordinate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, rank)))));\n};\nexport default ChessBoard;","map":{"version":3,"names":["React","useState","useEffect","whitePawn","whiteKnight","whiteBishop","whiteRook","whiteQueen","whiteKing","blackPawn","blackKnight","blackBishop","blackRook","blackQueen","blackKing","ChessBoard","board","selectedPiece","onSquareClick","highlightedSquares","checkIndicator","lastMove","hintMove","capturedPieces","setCapturedPieces","white","black","pieceImages","whitePieces","blackPieces","expectedPieces","actualPieces","row","col","piece","color","type","pieceType","whiteCaptured","blackCaptured","i","push","renderSquare","isSelected","isLightSquare","isValidMove","some","square","isCheck","isLastMoveFrom","from","isLastMoveTo","to","isHintFrom","fromRow","fromCol","isHintTo","toRow","toCol","createElement","key","className","onClick","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","String","fromCharCode","renderBoard","rows","cols","renderCapturedPieces","map","index","file","rank"],"sources":["/Users/aditya.thakkar/Documents/AI Chess/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ChessBoard.css';\n\n// Import SVG pieces\nimport whitePawn from '../assets/pieces/white-pawn.svg';\nimport whiteKnight from '../assets/pieces/white-knight.svg';\nimport whiteBishop from '../assets/pieces/white-bishop.svg';\nimport whiteRook from '../assets/pieces/white-rook.svg';\nimport whiteQueen from '../assets/pieces/white-queen.svg';\nimport whiteKing from '../assets/pieces/white-king.svg';\nimport blackPawn from '../assets/pieces/black-pawn.svg';\nimport blackKnight from '../assets/pieces/black-knight.svg';\nimport blackBishop from '../assets/pieces/black-bishop.svg';\nimport blackRook from '../assets/pieces/black-rook.svg';\nimport blackQueen from '../assets/pieces/black-queen.svg';\nimport blackKing from '../assets/pieces/black-king.svg';\n\nconst ChessBoard = ({ \n  board, \n  selectedPiece, \n  onSquareClick, \n  highlightedSquares = [], \n  checkIndicator = null,\n  lastMove = null,\n  hintMove = null\n}) => {\n  const [capturedPieces, setCapturedPieces] = useState({\n    white: [],\n    black: []\n  });\n\n  // Map piece types to SVG images\n  const pieceImages = {\n    'white': {\n      'pawn': whitePawn,\n      'knight': whiteKnight,\n      'bishop': whiteBishop,\n      'rook': whiteRook,\n      'queen': whiteQueen,\n      'king': whiteKing\n    },\n    'black': {\n      'pawn': blackPawn,\n      'knight': blackKnight,\n      'bishop': blackBishop,\n      'rook': blackRook,\n      'queen': blackQueen,\n      'king': blackKing\n    }\n  };\n\n  // Track captured pieces\n  useEffect(() => {\n    const whitePieces = [];\n    const blackPieces = [];\n    \n    // Count all pieces that should be on the board\n    const expectedPieces = {\n      'pawn': 8,\n      'rook': 2,\n      'knight': 2,\n      'bishop': 2,\n      'queen': 1,\n      'king': 1\n    };\n    \n    // Count pieces actually on the board\n    const actualPieces = {\n      'white': { 'pawn': 0, 'rook': 0, 'knight': 0, 'bishop': 0, 'queen': 0, 'king': 0 },\n      'black': { 'pawn': 0, 'rook': 0, 'knight': 0, 'bishop': 0, 'queen': 0, 'king': 0 }\n    };\n    \n    // Count pieces on the board\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece) {\n          actualPieces[piece.color][piece.type]++;\n        }\n      }\n    }\n    \n    // Calculate captured pieces\n    for (const pieceType in expectedPieces) {\n      const whiteCaptured = expectedPieces[pieceType] - actualPieces['white'][pieceType];\n      const blackCaptured = expectedPieces[pieceType] - actualPieces['black'][pieceType];\n      \n      for (let i = 0; i < whiteCaptured; i++) {\n        whitePieces.push(pieceType);\n      }\n      \n      for (let i = 0; i < blackCaptured; i++) {\n        blackPieces.push(pieceType);\n      }\n    }\n    \n    setCapturedPieces({\n      white: whitePieces,\n      black: blackPieces\n    });\n  }, [board]);\n\n  const renderSquare = (row, col) => {\n    const piece = board[row][col];\n    const isSelected = selectedPiece && selectedPiece.row === row && selectedPiece.col === col;\n    const isLightSquare = (row + col) % 2 === 0;\n    \n    // Check if this square is a valid move destination\n    const isValidMove = highlightedSquares.some(square => square.row === row && square.col === col);\n    \n    // Check if this square contains a king in check\n    const isCheck = checkIndicator && piece && piece.type === 'king' && piece.color === checkIndicator;\n    \n    // Check if this square was part of the last move\n    const isLastMoveFrom = lastMove && lastMove.from && lastMove.from.row === row && lastMove.from.col === col;\n    const isLastMoveTo = lastMove && lastMove.to && lastMove.to.row === row && lastMove.to.col === col;\n    \n    // Check if this square is part of the hint move\n    const isHintFrom = hintMove && hintMove.fromRow === row && hintMove.fromCol === col;\n    const isHintTo = hintMove && hintMove.toRow === row && hintMove.toCol === col;\n    \n    return (\n      <div \n        key={`${row}-${col}`}\n        className={`\n          square \n          ${isLightSquare ? 'light' : 'dark'} \n          ${isSelected ? 'selected' : ''} \n          ${isValidMove ? 'valid-move' : ''}\n          ${isCheck ? 'check' : ''}\n          ${isLastMoveFrom ? 'last-move-from' : ''}\n          ${isLastMoveTo ? 'last-move-to' : ''}\n          ${isHintFrom ? 'hint-from' : ''}\n          ${isHintTo ? 'hint-to' : ''}\n        `}\n        onClick={() => onSquareClick(row, col)}\n      >\n        {isValidMove && !piece && <div className=\"move-indicator\"></div>}\n        {piece && (\n          <div className={`piece ${piece.color}`}>\n            <img \n              src={pieceImages[piece.color][piece.type]} \n              alt={`${piece.color} ${piece.type}`} \n              className=\"piece-image\"\n            />\n          </div>\n        )}\n        {isHintFrom && <div className=\"hint-indicator from\"></div>}\n        {isHintTo && <div className=\"hint-indicator to\"></div>}\n        {row === 7 && <div className=\"file-label\">{String.fromCharCode(97 + col)}</div>}\n        {col === 0 && <div className=\"rank-label\">{8 - row}</div>}\n      </div>\n    );\n  };\n\n  const renderBoard = () => {\n    const rows = [];\n    for (let row = 0; row < 8; row++) {\n      const cols = [];\n      for (let col = 0; col < 8; col++) {\n        cols.push(renderSquare(row, col));\n      }\n      rows.push(\n        <div key={row} className=\"board-row\">\n          {cols}\n        </div>\n      );\n    }\n    return rows;\n  };\n\n  const renderCapturedPieces = (color) => {\n    return capturedPieces[color].map((pieceType, index) => {\n      return (\n        <div key={`${color}-${pieceType}-${index}`} className={`captured-piece ${color}`}>\n          <img \n            src={pieceImages[color === 'white' ? 'white' : 'black'][pieceType]} \n            alt={`${color} ${pieceType}`} \n            className=\"captured-piece-image\"\n          />\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className=\"chess-board-container\">\n      <div className=\"captured-pieces black-captured\">\n        {renderCapturedPieces('black')}\n      </div>\n      <div className=\"chess-board\">\n        {renderBoard()}\n      </div>\n      <div className=\"captured-pieces white-captured\">\n        {renderCapturedPieces('white')}\n      </div>\n      <div className=\"board-coordinates\">\n        <div className=\"files\">\n          {['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].map(file => (\n            <div key={file} className=\"coordinate\">{file}</div>\n          ))}\n        </div>\n        <div className=\"ranks\">\n          {[8, 7, 6, 5, 4, 3, 2, 1].map(rank => (\n            <div key={rank} className=\"coordinate\">{rank}</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard; "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;;AAEzB;AAAA,OAAAC,SAAA;AAAA,OAAAC,WAAA;AAAA,OAAAC,WAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,WAAA;AAAA,OAAAC,WAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,SAAA;AAcA,MAAMC,UAAU,GAAGA,CAAC;EAClBC,KAAK;EACLC,aAAa;EACbC,aAAa;EACbC,kBAAkB,GAAG,EAAE;EACvBC,cAAc,GAAG,IAAI;EACrBC,QAAQ,GAAG,IAAI;EACfC,QAAQ,GAAG;AACb,CAAC,KAAK;EACJ,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC;IACnDwB,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC,CAAC;;EAEF;EACA,MAAMC,WAAW,GAAG;IAClB,OAAO,EAAE;MACP,MAAM,EAAExB,SAAS;MACjB,QAAQ,EAAEC,WAAW;MACrB,QAAQ,EAAEC,WAAW;MACrB,MAAM,EAAEC,SAAS;MACjB,OAAO,EAAEC,UAAU;MACnB,MAAM,EAAEC;IACV,CAAC;IACD,OAAO,EAAE;MACP,MAAM,EAAEC,SAAS;MACjB,QAAQ,EAAEC,WAAW;MACrB,QAAQ,EAAEC,WAAW;MACrB,MAAM,EAAEC,SAAS;MACjB,OAAO,EAAEC,UAAU;MACnB,MAAM,EAAEC;IACV;EACF,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACd,MAAM0B,WAAW,GAAG,EAAE;IACtB,MAAMC,WAAW,GAAG,EAAE;;IAEtB;IACA,MAAMC,cAAc,GAAG;MACrB,MAAM,EAAE,CAAC;MACT,MAAM,EAAE,CAAC;MACT,QAAQ,EAAE,CAAC;MACX,QAAQ,EAAE,CAAC;MACX,OAAO,EAAE,CAAC;MACV,MAAM,EAAE;IACV,CAAC;;IAED;IACA,MAAMC,YAAY,GAAG;MACnB,OAAO,EAAE;QAAE,MAAM,EAAE,CAAC;QAAE,MAAM,EAAE,CAAC;QAAE,QAAQ,EAAE,CAAC;QAAE,QAAQ,EAAE,CAAC;QAAE,OAAO,EAAE,CAAC;QAAE,MAAM,EAAE;MAAE,CAAC;MAClF,OAAO,EAAE;QAAE,MAAM,EAAE,CAAC;QAAE,MAAM,EAAE,CAAC;QAAE,QAAQ,EAAE,CAAC;QAAE,QAAQ,EAAE,CAAC;QAAE,OAAO,EAAE,CAAC;QAAE,MAAM,EAAE;MAAE;IACnF,CAAC;;IAED;IACA,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChC,MAAMC,KAAK,GAAGlB,KAAK,CAACgB,GAAG,CAAC,CAACC,GAAG,CAAC;QAC7B,IAAIC,KAAK,EAAE;UACTH,YAAY,CAACG,KAAK,CAACC,KAAK,CAAC,CAACD,KAAK,CAACE,IAAI,CAAC,EAAE;QACzC;MACF;IACF;;IAEA;IACA,KAAK,MAAMC,SAAS,IAAIP,cAAc,EAAE;MACtC,MAAMQ,aAAa,GAAGR,cAAc,CAACO,SAAS,CAAC,GAAGN,YAAY,CAAC,OAAO,CAAC,CAACM,SAAS,CAAC;MAClF,MAAME,aAAa,GAAGT,cAAc,CAACO,SAAS,CAAC,GAAGN,YAAY,CAAC,OAAO,CAAC,CAACM,SAAS,CAAC;MAElF,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,aAAa,EAAEE,CAAC,EAAE,EAAE;QACtCZ,WAAW,CAACa,IAAI,CAACJ,SAAS,CAAC;MAC7B;MAEA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,aAAa,EAAEC,CAAC,EAAE,EAAE;QACtCX,WAAW,CAACY,IAAI,CAACJ,SAAS,CAAC;MAC7B;IACF;IAEAb,iBAAiB,CAAC;MAChBC,KAAK,EAAEG,WAAW;MAClBF,KAAK,EAAEG;IACT,CAAC,CAAC;EACJ,CAAC,EAAE,CAACb,KAAK,CAAC,CAAC;EAEX,MAAM0B,YAAY,GAAGA,CAACV,GAAG,EAAEC,GAAG,KAAK;IACjC,MAAMC,KAAK,GAAGlB,KAAK,CAACgB,GAAG,CAAC,CAACC,GAAG,CAAC;IAC7B,MAAMU,UAAU,GAAG1B,aAAa,IAAIA,aAAa,CAACe,GAAG,KAAKA,GAAG,IAAIf,aAAa,CAACgB,GAAG,KAAKA,GAAG;IAC1F,MAAMW,aAAa,GAAG,CAACZ,GAAG,GAAGC,GAAG,IAAI,CAAC,KAAK,CAAC;;IAE3C;IACA,MAAMY,WAAW,GAAG1B,kBAAkB,CAAC2B,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACf,GAAG,KAAKA,GAAG,IAAIe,MAAM,CAACd,GAAG,KAAKA,GAAG,CAAC;;IAE/F;IACA,MAAMe,OAAO,GAAG5B,cAAc,IAAIc,KAAK,IAAIA,KAAK,CAACE,IAAI,KAAK,MAAM,IAAIF,KAAK,CAACC,KAAK,KAAKf,cAAc;;IAElG;IACA,MAAM6B,cAAc,GAAG5B,QAAQ,IAAIA,QAAQ,CAAC6B,IAAI,IAAI7B,QAAQ,CAAC6B,IAAI,CAAClB,GAAG,KAAKA,GAAG,IAAIX,QAAQ,CAAC6B,IAAI,CAACjB,GAAG,KAAKA,GAAG;IAC1G,MAAMkB,YAAY,GAAG9B,QAAQ,IAAIA,QAAQ,CAAC+B,EAAE,IAAI/B,QAAQ,CAAC+B,EAAE,CAACpB,GAAG,KAAKA,GAAG,IAAIX,QAAQ,CAAC+B,EAAE,CAACnB,GAAG,KAAKA,GAAG;;IAElG;IACA,MAAMoB,UAAU,GAAG/B,QAAQ,IAAIA,QAAQ,CAACgC,OAAO,KAAKtB,GAAG,IAAIV,QAAQ,CAACiC,OAAO,KAAKtB,GAAG;IACnF,MAAMuB,QAAQ,GAAGlC,QAAQ,IAAIA,QAAQ,CAACmC,KAAK,KAAKzB,GAAG,IAAIV,QAAQ,CAACoC,KAAK,KAAKzB,GAAG;IAE7E,oBACEjC,KAAA,CAAA2D,aAAA;MACEC,GAAG,EAAE,GAAG5B,GAAG,IAAIC,GAAG,EAAG;MACrB4B,SAAS,EAAE;AACnB;AACA,YAAYjB,aAAa,GAAG,OAAO,GAAG,MAAM;AAC5C,YAAYD,UAAU,GAAG,UAAU,GAAG,EAAE;AACxC,YAAYE,WAAW,GAAG,YAAY,GAAG,EAAE;AAC3C,YAAYG,OAAO,GAAG,OAAO,GAAG,EAAE;AAClC,YAAYC,cAAc,GAAG,gBAAgB,GAAG,EAAE;AAClD,YAAYE,YAAY,GAAG,cAAc,GAAG,EAAE;AAC9C,YAAYE,UAAU,GAAG,WAAW,GAAG,EAAE;AACzC,YAAYG,QAAQ,GAAG,SAAS,GAAG,EAAE;AACrC,SAAU;MACFM,OAAO,EAAEA,CAAA,KAAM5C,aAAa,CAACc,GAAG,EAAEC,GAAG,CAAE;MAAA8B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAEtCvB,WAAW,IAAI,CAACX,KAAK,iBAAIlC,KAAA,CAAA2D,aAAA;MAAKE,SAAS,EAAC,gBAAgB;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAM,CAAC,EAC/DlC,KAAK,iBACJlC,KAAA,CAAA2D,aAAA;MAAKE,SAAS,EAAE,SAAS3B,KAAK,CAACC,KAAK,EAAG;MAAA4B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACrCpE,KAAA,CAAA2D,aAAA;MACEU,GAAG,EAAE1C,WAAW,CAACO,KAAK,CAACC,KAAK,CAAC,CAACD,KAAK,CAACE,IAAI,CAAE;MAC1CkC,GAAG,EAAE,GAAGpC,KAAK,CAACC,KAAK,IAAID,KAAK,CAACE,IAAI,EAAG;MACpCyB,SAAS,EAAC,aAAa;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACxB,CACE,CACN,EACAf,UAAU,iBAAIrD,KAAA,CAAA2D,aAAA;MAAKE,SAAS,EAAC,qBAAqB;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAM,CAAC,EACzDZ,QAAQ,iBAAIxD,KAAA,CAAA2D,aAAA;MAAKE,SAAS,EAAC,mBAAmB;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAM,CAAC,EACrDpC,GAAG,KAAK,CAAC,iBAAIhC,KAAA,CAAA2D,aAAA;MAAKE,SAAS,EAAC,YAAY;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAEG,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGvC,GAAG,CAAO,CAAC,EAC9EA,GAAG,KAAK,CAAC,iBAAIjC,KAAA,CAAA2D,aAAA;MAAKE,SAAS,EAAC,YAAY;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAE,CAAC,GAAGpC,GAAS,CACrD,CAAC;EAEV,CAAC;EAED,MAAMyC,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,IAAI,GAAG,EAAE;IACf,KAAK,IAAI1C,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,MAAM2C,IAAI,GAAG,EAAE;MACf,KAAK,IAAI1C,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChC0C,IAAI,CAAClC,IAAI,CAACC,YAAY,CAACV,GAAG,EAAEC,GAAG,CAAC,CAAC;MACnC;MACAyC,IAAI,CAACjC,IAAI,cACPzC,KAAA,CAAA2D,aAAA;QAAKC,GAAG,EAAE5B,GAAI;QAAC6B,SAAS,EAAC,WAAW;QAAAE,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GACjCO,IACE,CACP,CAAC;IACH;IACA,OAAOD,IAAI;EACb,CAAC;EAED,MAAME,oBAAoB,GAAIzC,KAAK,IAAK;IACtC,OAAOZ,cAAc,CAACY,KAAK,CAAC,CAAC0C,GAAG,CAAC,CAACxC,SAAS,EAAEyC,KAAK,KAAK;MACrD,oBACE9E,KAAA,CAAA2D,aAAA;QAAKC,GAAG,EAAE,GAAGzB,KAAK,IAAIE,SAAS,IAAIyC,KAAK,EAAG;QAACjB,SAAS,EAAE,kBAAkB1B,KAAK,EAAG;QAAA4B,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,gBAC/EpE,KAAA,CAAA2D,aAAA;QACEU,GAAG,EAAE1C,WAAW,CAACQ,KAAK,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC,CAACE,SAAS,CAAE;QACnEiC,GAAG,EAAE,GAAGnC,KAAK,IAAIE,SAAS,EAAG;QAC7BwB,SAAS,EAAC,sBAAsB;QAAAE,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CACjC,CACE,CAAC;IAEV,CAAC,CAAC;EACJ,CAAC;EAED,oBACEpE,KAAA,CAAA2D,aAAA;IAAKE,SAAS,EAAC,uBAAuB;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpCpE,KAAA,CAAA2D,aAAA;IAAKE,SAAS,EAAC,gCAAgC;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5CQ,oBAAoB,CAAC,OAAO,CAC1B,CAAC,eACN5E,KAAA,CAAA2D,aAAA;IAAKE,SAAS,EAAC,aAAa;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACzBK,WAAW,CAAC,CACV,CAAC,eACNzE,KAAA,CAAA2D,aAAA;IAAKE,SAAS,EAAC,gCAAgC;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5CQ,oBAAoB,CAAC,OAAO,CAC1B,CAAC,eACN5E,KAAA,CAAA2D,aAAA;IAAKE,SAAS,EAAC,mBAAmB;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAChCpE,KAAA,CAAA2D,aAAA;IAAKE,SAAS,EAAC,OAAO;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACnB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACS,GAAG,CAACE,IAAI,iBAChD/E,KAAA,CAAA2D,aAAA;IAAKC,GAAG,EAAEmB,IAAK;IAAClB,SAAS,EAAC,YAAY;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEW,IAAU,CACnD,CACE,CAAC,eACN/E,KAAA,CAAA2D,aAAA;IAAKE,SAAS,EAAC,OAAO;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACnB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACS,GAAG,CAACG,IAAI,iBAChChF,KAAA,CAAA2D,aAAA;IAAKC,GAAG,EAAEoB,IAAK;IAACnB,SAAS,EAAC,YAAY;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEY,IAAU,CACnD,CACE,CACF,CACF,CAAC;AAEV,CAAC;AAED,eAAejE,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}